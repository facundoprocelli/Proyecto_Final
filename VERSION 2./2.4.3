#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

//-------------------CONSTANTES---------------------------------
#define maxCaracteres         100
#define cantNacionalidades    213
#define cantEspecialidades    5
#define cantidadOpciones 6
#define cantTiposNave         3
#define cantEstados           4
#define minimaCantidadOpciones 1
#define maxCantidadMenu 2
#define maxCantidadOpciones 3
#define maxCantidadModificacionesAstro 10
#define edadMaxima 100
#define edadMinima 18
#define maxCantidadHoras 10000
#define maxcantidadViajes 500
#define maxCantidadModificacionesNave 4
#define minIdAstro 101
#define minIdNave 1001
#define cantidadTipoBusquedaEdad 3
#define cantEstadosNave 5
#define detalleDeMision 200
#define cantCargamentos 6
#define cantDestinos 6
#define maxTripulates 3
#define maxCantidadModificacionesMision 6
#define minIdMision 1
#define cantEstadosMision 5
#define cantOpcionesMostrarMisiones 4


//---------------------------ARCHIVOS----------------------------

#define archiAstronauta "astronauta.bin"
#define archiNave "nave.bin"
#define archiMision "mision.bin"


//-------------------ESTRUCTURAS------------------------------------
//ASTRONAUTA
typedef struct
{
    int  ID;
    char nombre[maxCaracteres];
    char apellido[maxCaracteres];
    char apodo[maxCaracteres];
    int  edad;
    char nacionalidad[maxCaracteres];
    char especialidad[maxCaracteres];
    int  horasVueloAcumuladas;
    int  misionesEspacialesRealizadas;
    int  horasAcumuladasEEI;
    int  estado;
} astronauta;


//NAVE
typedef struct
{

    int  ID;
    char tipoNave[maxCaracteres];
    int  cantVuelosRealizados;
    int  horasAcumuladasVuelo;
    char estado[maxCaracteres];
} nave;

//MISIONES



typedef struct
{

    int  ID;
    int  iDNave;
    char estado[maxCaracteres];
    char cargamento[maxCaracteres];
    char destino[maxCaracteres];
    int  tripulacion[maxTripulates];
    char detalleMision[detalleDeMision];

} stMision;


//-------------------DECLARACION DE FUNCIONES-------------------------------------------
void funcionAstronautas();
void funcionNaves();

//------------------CARGAR ITEMS------------------------
void cargarNombre(astronauta* astro);

void cargarAstronautaNuevo(astronauta* astro);

void cargarApellido(astronauta* astro);

void cargarApodo(astronauta* astro);

void cargarNacionalidad(astronauta* astro);

void cargarEdad(astronauta* astro);

void cargarEspecialidad(astronauta* astro);

void astronautasPredeterminados();

void buscarAstronautaPorId();

void cargarHorasVueloAcumuladas();

void cargarHorasEnEEI(astronauta *astro);

void cargarMisionesEspaciales(astronauta *astro);


//MOSTRAR COSAS

void mostrarDatosAstronauta(astronauta astronauta);

void mostrarCatalogoNacionalidades(char nacionalidades[66][maxCaracteres]);

void mostrarEspecialidades(char especialidades[][maxCaracteres]);

void baseNacionalidades(char nacionalidades[cantNacionalidades][maxCaracteres]);

void especialidadesAstronauta(char especialidades[][maxCaracteres]);

void mostrarAstronautaArchivo();

void menuModificacionesAstro();

void menuOpcionesFunciones();

void menuIDAstro();

void mostrarListaIDAstro();


void mostrarAstronautas();

void mostrarListaOpcionesMostrar();

void mostrarAstronautasRetirados();

void mastrarAstronautasActivos();

void mostrarAstronautasActivos();

void mostrarIDAstro();



//VALIDACIONES

int  validacionEdad(int edad);

int  validacionString(char string[maxCaracteres]);

int validacionEspecialidad (int seleccion);

int validacionNacionalidad(char nacionalidad[maxCaracteres], char nacionalidades[cantNacionalidades][maxCaracteres]);

void validacionRespuesta(char valor);

int validacionHoras(int horas);

int confirmarID(int idBuscado, int *confirm );

int validacionNumeros(char str[100], int min, int max);

int validacionIDAstro(int id);

//-----------------DATOS DE RELEVANCIA-------------------

int ultimoIdAstro();

int tamanoArchiAstro();

int idBuscadoAstro();

//----------------MENUES-------------------------------

void menuConsultasAstro();

void menuConsultaEdadesAstro();

//--------------------MODIFICAR DATOS DEL ASTRONAUTA------------

void cambiarEstadoAstronauta();

void modificarAstronauta();

void cambiarNombreAstronauta();

void cambiarApellidoAstronauta();

void cambiarApodoAstronauta();

void cambiarEdadAstronauta();

void cambiarNacionalidadAstronauta();

void cambiarEspecialidadAstronauta();

void cambiarHorasVueloAcumuladasAstronauta();

void cambiarHorasEnEEI();

void cambiarMisionesEspaciales();

void reiniciarSistema();

//-------------CONSULTAR DATOS ASTRONAUTA-----------------------------

void consultarAstronauta();

void buscarAstronautaPorNombre();
int  validarNombreConsulta(char nombre[]);
void mostrarListaNombres();

void buscarAstronautaPorApellido();
int  validarApellidoConsulta(char apellido[]);
void mostrarListaApellido();

void buscarAstronautaPorApodo();
int  validarApodoConsulta(char apodo[]);
void mostrarListaApodo();

void buscarAstronautaPorEdad();

void consultarEdadExacta();
int validarEdadConsulta(int edad);
void mostrarListaEdades();
void consultarMenores();
void consultarMayores();

void buscarAstronautaPorNacionalidad();

void buscarAstronautaPorEspecialidad();

void  buscarAstronautaPorHorasAcumuladas();
int validarHorasConsulta(int horas);
void consultarHorasExactas();
void consultarMayoresHoras();
void consultarMenoresHoras();
void mostrarListaHoras();


void buscarAstronautaPorHorasEnIEE();
void consultarHorasIEEExacta();
int validarHorasIEEConsulta(int horas);
void mostrarListaIEE();
void consultarMayoresIEE();
void consultarMenoresIEE();
void    menuConsultaHorasIEEAstro();

void buscarAstronautaPorViajes();
void consultarViajesExacto();
int validarViajesAstro(int misiones);
void mostrarListaViajesAstro();
void consultarMayoresViajesAstro();
void consultarMenoresViajesAstro();
void    menuConsultaViajesAstro();

//SALUDO FINAL

void saludoFinal(char valor[2]);

void mostrarOpcionesPrincipales();

//-------------------------------------------------------------------------------------------------------------------
//NAVES


//TIPO DE NAVE
void cargarTipoNave(nave* nav);

void mostrarTipoNave(char tiposNaves[cantTiposNave][maxCaracteres]);

void menuTiposNave(char tiposNave[cantTiposNave][maxCaracteres]);

int validacionTipoNave (int seleccion);



//ESTADO
void tiposEstado(char estados[cantEstados][maxCaracteres]);

void mostrarEstados(char estados[cantEstados][maxCaracteres]);

int validacionEstado(int seleccion);

void cargarEstado(nave* nav);


//ID
int ultimoIdNave();

int tamanoArchiNave();

void menuIDNave();

int idBuscadoNave();

int validacionIDNave(int id);


//NAVES PREDETERMINADAS
void navesPredeterminadas();

//MOSTRAR COSAS
void mostrarDatosNave(nave nav);

void mostrarArchivoNaves();

void mostrarListaIDNave();


//MODIFICACIONES NAVES
void cambiarEstadoNave();

void menuModificacionesNave();

void cambiarEstadoNave();

void cambiarTipoNave();

void cambiarHorasVueloAcumuladasNave();

void cargarHorasVueloAcumuladasNave(nave* nav);

void cargarCantVuelosHechosNave(nave* nav);

void cambiarVuelosHechosNave();

void menuOpcionesFuncionesNave();

//---------------------------MISIONES-------------------------------
void misionPredeterminada();

void funcionMisiones();

void mostrarListaOpcionesMostrarNave();

void mostrarNavesEnMision();

void mostrarNavesEnMantenimiento();

void mostrarNavesListas();

void mostrarNavesRetiradas();

void consultarNaves();

void menuConsultasNave();

void buscarNavePorTipo();

void buscarNavePorVuelos();

void buscarNavePorHoras();

void buscarNavesPorEstado();

void consultarVuelosExactoNave();

void consultarMayoresVuelosNave();

void consultarMenoresVuelosNAve();

void mostrarListaVuelosNave();

int validarVuelosNave(int vuelos);

void menuConsultasHorasNave();

void consultarHorasExactoNave();

void consultarMayoresHorasNave();

void consultarMenoresHorasNave();

void mostrarListaHorasNave();

int validarHorasNave(int vuelos);

int cargarNuevaMision(stMision * misio);

void buscarMisionPorId();

void mostrarArchivoMisiones();

void modificarMision();

void consultarMisiones();

int ultimoIdMision();

int cargarIdNaveMision(stMision* misio);

void cargarCargamentoMision(stMision * misio);

void cargarDestinoMision(stMision * misio);

int cargarTripulantesMision(stMision * misio);

void cargarDetalleMision(stMision * misio);

//void mostrarDatosMision(stMision  misio);

void cambiarEstadoNaveEnMision(int id);

void cambiarHorasDeVueloAstro(m);

void menuCargamento(char menuCargamentoMision[][maxCaracteres]);

int buscarPosicionLugar(char cargamentos[][maxCaracteres], char lugar[]);

void cambiarHorasAstronautas(int posicion, int id);

void menuHorasDeViaje(int horasDeViaje[]);

int mostrarListaTripulantesActivos(int tripulantes[]);

int validarIdAstronautaMision(int tripulates[], int operador, int validos);

int confirmacion(int dato);

int mostrarNavesDisponibles(int idDisponibles[]);

int validarIdNaveMision(int idDisponibles[], int operador, int validos);

void mostrarMenuCargamento(char menuCargamentoMision[][maxCaracteres]);

void menuDestino(char menuDestinoMision[][maxCaracteres]);

void mostrarMenuDestino(char menuDestinoMision[][maxCaracteres]);

void menuIDMision();

int idBuscadoMision();

void mostrarListaIDMision();

void buscarMisionPorCargamento();

void buscarMisionPorDestino();

void cambiarHorasDeVueloNave(int id, char lugar[]);

void cambiarVuelosHechosAstronauta(int id);

void cambiarVuelosHechosNaveMision(int id);

//---------------------------------MAIN--------------------------------------------------------------------------------

int main()
{

     //navesPredeterminadas();
     //astronautasPredeterminados();
     //misionPredeterminada();


    char valor[] = "si";
    int operador;
    char strOpcion[maxCaracteres];

    while(strcmp(valor, "si") == 0)
    {

        operador = -1;
        printf("Insertar operacion a realizar: ");
        mostrarOpcionesPrincipales();
        gets(strOpcion);

        while(operador < 0)
        {
            operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadOpciones);

            if (operador > minimaCantidadOpciones && operador <= maxCantidadOpciones)
            {
                break;
            }
        }



        switch(operador)
        {


        case 1:
            funcionAstronautas();
            break;

        case 2:
            funcionNaves();
            break;

        case 3:
            funcionMisiones();
            break;

        default:
            printf("Opcion invalida");
            break;



        }

        printf("\n\nDesea Seguir operando?\n|'si'| Seguir operando\n|'no'| Dejar de operar\n");
        fflush(stdin);
        gets(valor);


        while(strcmp(valor, "si") != 0 && strcmp(valor, "no") != 0)
        {

            printf("Ingresa opcion valida\n");
            fflush(stdin);
            gets(valor);

        }

        if(strcmp(valor, "no") == 0)
        {
            reiniciarSistema();
            saludoFinal(valor);
        }
    }

    return 0;
}
//-----------------VALIDACION NUMEROS------------------------

int validacionNumeros(char str[100], int min, int max)
{
    char *endptr;
    long num = strtol(str, &endptr, 10);
    int valido =0;
    int conv;

    conv = (int)num;
    if (*endptr == '\0' && conv >= min && conv <= max )
    {
        valido = 1;
    }
    else
    {
        while (valido == 0)
        {
            printf("Ingrese un numero valido\n NUMERO:");
            gets(str);
            num = strtol(str, &endptr, 10);
            conv = (int)num;
            if (*endptr == '\0' && conv >= min && conv <= max)
            {
                valido = 1;

            }
        }
    }
    conv = (int)num;
    return conv;
}


//-----------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------------

void funcionAstronautas()
{

    astronauta astro;


    int operador = -1;
    char valor[] = "si";
    char strOpcion[maxCaracteres];


    while(strcmp(valor, "si") == 0)
    {
        operador = -1;
        menuOpcionesFunciones();
        fflush(stdin);
        gets(strOpcion);

        while(operador < 0)
        {
            operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantidadOpciones);

            if (operador > minimaCantidadOpciones && operador <= cantidadOpciones)
            {
                break;
            }
        }

        switch(operador)
        {

        case 1:

            cargarAstronautaNuevo(&astro);
            break;

        case 2:
            buscarAstronautaPorId();
            break;

        case 3:

            cambiarEstadoAstronauta();
            break;

        case 4:
            modificarAstronauta();
            break;

        case 5:
            mostrarAstronautas();
            break;

        case 6:
            consultarAstronauta();
            break;

        default:
            printf("Numero Incorrecto \n");

            break;
        }

        printf("\n Ingrese 'si', para hacer una nueva operacion con astronautas\n Ingrese 'no', para dejar de operar con astronautas\n ");
        fflush(stdin);
        gets(valor);


        while (strcmp(valor, "si") != 0 && strcmp(valor, "no") != 0 )
        {
            printf("Ingrese una opcion valida: ");
            fflush(stdin);
            gets(valor);
        }
    }

}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------------


void mostrarOpcionesPrincipales()
{

    printf("\n|1| ASTRONAUTAS");
    printf("\n|2| NAVES");
    printf("\n|3| MISIONES\n");

}



//REINICIAR SISTEMA
void reiniciarSistema()//VERIFICAR FAKA AYUDA PORFA GRACIAS
{

    int reiniciador;
    char confirmacion[maxCaracteres];

    printf("|1| Reiniciar sistema\n|0|Seguir con los datos cargados\n");
    scanf("%i", &reiniciador);


    while (reiniciador != 1 && reiniciador != 0)
    {

        printf("Ingrese un valor valido\n");
        fflush(stdin);
        scanf("%i", &reiniciador);
    }


    while(reiniciador == 1)
    {

        printf("Escriba CONFIRMAR, para seguir ");
        fflush(stdin);
        gets(confirmacion);

        if  (strcmp(confirmacion, "CONFIRMAR") == 0)
        {

            astronautasPredeterminados();
            navesPredeterminadas();
            misionPredeterminada();
            reiniciador =0;

        }

        else
        {
            printf("\nAsegurese de escribir CONFIRMAR de forma identica\n");
            printf("\n|1| Intentar nuevamente\n|0| Cerrar programa con datos guardados \n");
            int val;

            scanf("%i", &val);

            while (val != 0 &&  val != 1)
            {

                printf("Inserte numero valido: ");
                fflush(stdin);
                scanf("%i", &val);
            }


            if(val == 1)
            {
                reiniciador = 1;
            }
            else
                reiniciador = 0;
        }


    }
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------



//-----------OPCIONES DE ACIONES------------

void menuOpcionesFunciones()
{

    printf("\nQue queres hacer?\n");
    printf("|1| CARGAR ASTRONAUTAS\n");
    printf("|2| BUSCAR ASTRONAUTA POR SU ID\n");
    printf("|3| CAMBIAR ESTADO DE ASTRONAUTA\n");
    printf("|4| MODIFICAR DATOS DEL ASTRONAUTA\n");
    printf("|5| MOSTRAR ASTRONAUTAS\n");
    printf("|6| CONSULTAR ASTRONAUTA\n");

}


//-----------------------------CONSULTAR ASTRONAUTA-----------------------------

void consultarAstronauta()
{


    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione el aspecto que desea consultar del astronauta: ");
    menuConsultasAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadModificacionesAstro);

        if (operador > minimaCantidadOpciones && operador < maxCantidadModificacionesAstro)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        buscarAstronautaPorId();
        break;

    case 2:
        buscarAstronautaPorNombre();
        break;

    case 3:
        buscarAstronautaPorApellido();
        break;

    case 4:
        buscarAstronautaPorApodo();
        break;

    case 5:
        buscarAstronautaPorEdad();
        break;

    case 6:
        buscarAstronautaPorNacionalidad();
        break;

    case 7:
        buscarAstronautaPorEspecialidad();
        break;

    case 8:
        buscarAstronautaPorHorasAcumuladas();
        break;

    case 9:
        buscarAstronautaPorHorasEnIEE();
        break;

    case 10:
        buscarAstronautaPorViajes();
        break;

    default:
        printf("El numero ingresado no corresponde con las opciones");
        break;
    }


}


void buscarAstronautaPorNombre()
{

    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;
    char nombre[maxCaracteres];
    int valido = 0;
    int veces = 0;
    int nombreValido = 0;


    fflush(stdin);
    printf("\nIngrese el nombre que desea buscar\n Nombre: ");
    gets(nombre);



    valido = validacionString(nombre);
    nombreValido = validarNombreConsulta(nombre);


    while (valido == 0 || nombreValido == 0)
    {
        if (veces == 0)
        {

            mostrarListaNombres();
            veces++;
        }

        printf("Ingrese un nombre valido\nNombre: ");
        fflush(stdin);
        gets(nombre);
        valido = validacionString(nombre);
        nombreValido = validarNombreConsulta(nombre);
    }


    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (strcmp(astro.nombre, nombre) == 0)
        {

            mostrarDatosAstronauta(astro);
        }
    }

    fclose(archi);
}

int  validarNombreConsulta(char nombre[])
{

    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        if (strcmp(astro.nombre, nombre) == 0)
        {

            return 1;
        }

    }
    return 0;
    fclose(archi);
}

void mostrarListaNombres()
{
    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de nombres \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %s\n", astro.nombre);

    }

    fclose(archi);
}



void buscarAstronautaPorApellido()
{

    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;
    char apellido[maxCaracteres];
    int valido = 0;
    int veces = 0;
    int apellidoValido = 0;


    fflush(stdin);
    printf("\nIngrese el Apellido que desea buscar\n Apellido: ");
    gets(apellido);



    valido = validacionString(apellido);
    apellidoValido = validarApellidoConsulta(apellido);


    while (valido == 0 || apellidoValido == 0)
    {
        if (veces == 0)
        {

            mostrarListaApellido();
            veces++;
        }

        printf("Ingrese un apellido valido\nApellido: ");
        fflush(stdin);
        gets(apellido);
        valido = validacionString(apellido);
        apellidoValido = validarApellidoConsulta(apellido);
    }


    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (strcmp(astro.apellido, apellido) == 0)
        {

            mostrarDatosAstronauta(astro);
        }
    }

    fclose(archi);
}

int  validarApellidoConsulta(char apellido[])
{

    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        if (strcmp(astro.apellido, apellido) == 0)
        {

            return 1;
        }

    }
    return 0;
    fclose(archi);
}

void mostrarListaApellido()
{
    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de Apellidos \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %s\n", astro.apellido);

    }

    fclose(archi);
}


void buscarAstronautaPorApodo()
{

    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;
    char apodo[maxCaracteres];
    int valido = 0;
    int veces = 0;
    int apodoValido = 0;


    fflush(stdin);
    printf("\nIngrese el apodo que desea buscar\n Apodo: ");
    gets(apodo);



    valido = validacionString(apodo);
    apodoValido = validarApodoConsulta(apodo);


    while (valido == 0 || apodoValido == 0)
    {
        if (veces == 0)
        {

            mostrarListaApodo();
            veces++;
        }

        printf("Ingrese un apodo valido\nApodo: ");
        fflush(stdin);
        gets(apodo);
        valido = validacionString(apodo);
        apodoValido = validarApodoConsulta(apodo);
    }


    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (strcmp(astro.apodo, apodo) == 0)
        {

            mostrarDatosAstronauta(astro);
        }
    }

    fclose(archi);
}

int  validarApodoConsulta(char apodo[])
{

    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        if (strcmp(astro.apodo, apodo) == 0)
        {

            return 1;
        }

    }
    return 0;
    fclose(archi);
}

void mostrarListaApodo()
{
    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de Apodos \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %s\n", astro.apodo);

    }

    fclose(archi);
}





void buscarAstronautaPorEdad()
{


    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione de que forma quiere buscar: ");
    menuConsultaEdadesAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantidadTipoBusquedaEdad);

        if (operador > minimaCantidadOpciones && operador < cantidadTipoBusquedaEdad)
        {
            break;
        }
    }

    switch(operador)
    {

    case 1:
        consultarEdadExacta();
        break;

    case 2:
        consultarMayores();
        break;
    case 3:
        consultarMenores();
        break;

    }

}


void consultarEdadExacta()
{

    int valido = 0;
    astronauta astro;
    astronauta aux;
    int veces = 0;

    FILE* archi = fopen(archiAstronauta,"rb");


    mostrarListaEdades();

    while (valido == 0)
    {
        cargarEdad(&aux);
        valido = validarEdadConsulta(aux.edad);

    }
    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (aux.edad == astro.edad)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumple con ese requisito\n");
    }

    fclose(archi);

}

int validarEdadConsulta(int edad)
{

    FILE * archi = fopen(archiAstronauta, "rb");
    astronauta astro;

    while (fread(&astro, sizeof(astronauta),1, archi) > 0)
    {


        if (astro.edad == edad)
        {

            return 1;
        }

    }
    return 0;
    fclose(archi);
}

void mostrarListaEdades()
{

    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de Edades \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %i\n", astro.edad);

    }

    fclose(archi);

}


void consultarMayores()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la edad minima\nEDAD: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,edadMinima,edadMaxima);

        if (operador > edadMinima && operador < edadMaxima)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.edad >= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }
    fclose(archi);
}

void consultarMenores()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la edad maxima\nEDAD: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,edadMinima,edadMaxima);

        if (operador > edadMinima && operador < edadMaxima)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.edad <= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }


    fclose(archi);
}

void menuConsultaEdadesAstro()
{

    printf("\n|1| Buscar por edad exacta");
    printf("\n|2| Buscar Mayores a una edad");
    printf("\n|1| Buscar Menores a una edad");

}



void buscarAstronautaPorNacionalidad()
{

    FILE* archi = fopen(archiAstronauta, "rb");
    int veces = 0;

    astronauta astro;
    astronauta aux;


    cargarNacionalidad(&aux);


    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (strcmp(astro.nacionalidad, aux.nacionalidad) == 0)
        {
            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }

    fclose(archi);
}


void buscarAstronautaPorEspecialidad()
{

    FILE * archi = fopen(archiAstronauta, "rb");

    astronauta astro;
    astronauta aux;
    int veces = 0;

    cargarEspecialidad(&aux);

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {



        if (strcmp(astro.especialidad, aux.especialidad) == 0)
        {


            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }


    fclose(archi);


}

void    menuConsultaHorasAstro()
{

    printf("\n|1| Buscar horas Exactas de vuelo\n");
    printf("|2| Buscar horas mayores\n");
    printf("|3| Buscar Horas menores\n");



}

void  buscarAstronautaPorHorasAcumuladas()
{


    int operador = -1;
    char strOpcion[maxCaracteres];



    printf("Seleccione de que forma quiere buscar: ");
    menuConsultaHorasAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantidadTipoBusquedaEdad);

        if (operador > minimaCantidadOpciones && operador < cantidadTipoBusquedaEdad)
        {
            break;
        }
    }

    switch(operador)
    {

    case 1:
        consultarHorasExactas();
        break;

    case 2:
        consultarMayoresHoras();
        break;
    case 3:
        consultarMenoresHoras();
        break;

    }
}

int validarHorasConsulta(int horas)
{

    FILE * archi = fopen(archiAstronauta, "rb");
    astronauta astro;

    while (fread(&astro, sizeof(astronauta),1, archi) > 0)
    {


        if (astro.horasVueloAcumuladas == horas)
        {

            return 1;
        }

    }
    return 0;
    fclose(archi);
}

void consultarHorasExactas()
{

    int valido = 0;
    astronauta astro;
    astronauta aux;
    int veces = 0;

    FILE* archi = fopen(archiAstronauta,"rb");


    mostrarListaHoras();

    while (valido == 0)
    {
        cargarHorasVueloAcumuladas(&aux);
        valido = validarHorasConsulta(aux.horasVueloAcumuladas);

    }
    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (aux.horasVueloAcumuladas == astro.horasVueloAcumuladas)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumple con ese requisito\n");
    }

    fclose(archi);
}


void consultarMayoresHoras()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese las Horas minimas\nHORAS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.horasVueloAcumuladas >= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }
    fclose(archi);
}

void consultarMenoresHoras()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese las horas maximas\nHORAS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.horasVueloAcumuladas <= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }


    fclose(archi);
}



void mostrarListaHoras()
{

    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de Horas de Vuelo \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %i\n", astro.horasVueloAcumuladas);

    }

    fclose(archi);
}






void buscarAstronautaPorHorasEnIEE()
{



    int operador = -1;
    char strOpcion[maxCaracteres];



    printf("Seleccione de que forma quiere buscar: ");
    menuConsultaHorasIEEAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {
            break;
        }
    }

    switch(operador)
    {

    case 1:
        consultarHorasIEEExacta();
        break;

    case 2:
        consultarMayoresIEE();
        break;
    case 3:
        consultarMenoresIEE();
        break;

    }

}


void consultarHorasIEEExacta()
{

    int valido = 0;
    astronauta astro;
    astronauta aux;
    int veces = 0;

    FILE* archi = fopen(archiAstronauta,"rb");


    mostrarListaIEE();

    while (valido == 0)
    {
        cargarHorasEnEEI(&aux);
        valido = validarHorasIEEConsulta(aux.horasAcumuladasEEI);

    }
    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (aux.horasAcumuladasEEI == astro.horasAcumuladasEEI)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumple con ese requisito\n");
    }

    fclose(archi);
}

int validarHorasIEEConsulta(int horas)
{

    FILE * archi = fopen(archiAstronauta, "rb");
    astronauta astro;

    while (fread(&astro, sizeof(astronauta),1, archi) > 0)
    {


        if (astro.horasAcumuladasEEI == horas)
        {

            return 1;
        }

    }
    return 0;
    fclose(archi);
}

void mostrarListaIEE()
{

    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de Horas En la IEE \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %i\n", astro.horasAcumuladasEEI);

    }

    fclose(archi);

}


void consultarMayoresIEE()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese las Horas minimas en la IEE\nHORAS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.horasAcumuladasEEI >= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }
    fclose(archi);
}

void consultarMenoresIEE()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese las horas  maximas en la IEE\nHORAS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.horasAcumuladasEEI <= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }


    fclose(archi);
}


void    menuConsultaHorasIEEAstro()
{

    printf("\n|1| Buscar horas Exactas en la EEI\n");
    printf("|2| Buscar horas mayores\n");
    printf("|3| Buscar Horas menores\n");


}




void buscarAstronautaPorViajes()
{


    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione de que forma quiere buscar: ");
    menuConsultaViajesAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantidadTipoBusquedaEdad);

        if (operador > minimaCantidadOpciones && operador < cantidadTipoBusquedaEdad)
        {
            break;
        }
    }

    switch(operador)
    {

    case 1:
        consultarViajesExacto();
        break;

    case 2:
        consultarMayoresViajesAstro();
        break;
    case 3:
        consultarMenoresViajesAstro();
        break;

    }

}


void consultarViajesExacto()
{

    int valido = 0;
    astronauta astro;
    astronauta aux;
    int veces = 0;

    FILE* archi = fopen(archiAstronauta,"rb");


    mostrarListaViajesAstro();

    while (valido == 0)
    {
        cargarMisionesEspaciales(&aux);
        valido = validarViajesAstro(aux.misionesEspacialesRealizadas);

    }
    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (aux.misionesEspacialesRealizadas == astro.misionesEspacialesRealizadas)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumple con ese requisito\n");
    }
    fclose(archi);
}

int validarViajesAstro(int misiones)
{

    FILE * archi = fopen(archiAstronauta, "rb");
    astronauta astro;

    while (fread(&astro, sizeof(astronauta),1, archi) > 0)
    {


        if (astro.misionesEspacialesRealizadas == misiones)
        {

            return 1;
        }

    }
    return 0;

    fclose(archi);
}

void mostrarListaViajesAstro()
{

    astronauta astro;
    FILE * archi = fopen(archiAstronauta, "rb");


    printf("\nLista de Misiones espaciales \n");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("- %i\n", astro.misionesEspacialesRealizadas);

    }

    fclose(archi);

}


void consultarMayoresViajesAstro()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la cantidad de viajes minima\nVIAJES: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxcantidadViajes);

        if (operador > minimaCantidadOpciones && operador < maxcantidadViajes)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.misionesEspacialesRealizadas >= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }
    fclose(archi);
}

void consultarMenoresViajesAstro()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la maxima cantidad de viajes\nViajes: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxcantidadViajes);

        if (operador > minimaCantidadOpciones && operador < maxcantidadViajes)
        {

            break;
        }
    }
    FILE *archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi))
    {



        if (astro.misionesEspacialesRealizadas <= operador)
        {

            mostrarDatosAstronauta(astro);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ningun astronauta que cumpla con ese requisito\n");
    }


    fclose(archi);
}


void    menuConsultaViajesAstro()
{

    printf("\n|1| Buscar cantidad de viajes exacta\n");
    printf("|2| Buscar cantidad mayor\n");
    printf("|3| Buscar cantidad menor\n");


}



















void menuConsultasAstro()
{


    printf("\n|1| = Buscar Astronauta por ID \n");
    printf(  "|2| = Buscar Astronauta por Nombre\n");
    printf(  "|3| = Buscar Astronauta por Apellido\n");
    printf(  "|4| = Buscar Astronauta por Apodo\n");
    printf(  "|5| = Buscar Astronauta por Edad\n");
    printf(  "|6| = Buscar Astronauta por Nacionalidad\n");
    printf(  "|7| = Buscar Astronauta por Especialidad\n");
    printf(  "|8| = Buscar Astronauta por Horas de vuelo acumuladas\n");
    printf(  "|9| = Buscar Astronauta por Horas en la EEI\n");
    printf(  "|10| = Buscar Astronauta por Misiones Espaciales\n");


}





//----------------------------MODIFICAR ASTRNAUTA---------------------------------

void modificarAstronauta()
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    FILE * archi = fopen(archiAstronauta, "r+b");

    printf("Seleccione el aspecto que desea modificar del astronauta: ");
    menuModificacionesAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadModificacionesAstro);

        if (operador > minimaCantidadOpciones && operador < maxCantidadModificacionesAstro)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        cambiarNombreAstronauta();
        break;

    case 2:
        cambiarApellidoAstronauta();
        break;

    case 3:
        cambiarApodoAstronauta();
        break;

    case 4:
        cambiarEdadAstronauta();
        break;

    case 5:
        cambiarNacionalidadAstronauta();
        break;

    case 6:
        cambiarEspecialidadAstronauta();
        break;

    case 7:
        cambiarHorasVueloAcumuladasAstronauta();
        break;

    case 8:
        cambiarHorasEnEEI();
        break;

    case 9:
        cambiarMisionesEspaciales();

        break;

    case 10:
        cambiarEstadoAstronauta();
        break;

    default:
        printf("El numero ingresado no corresponde con las opciones");
        break;
    }

    fclose(archi);
}


//----------------MOSTRAR ASTRONAUTA------------------------------
void mostrarAstronautas()
{


    int operador = -1;
    char strOpcion[maxCaracteres];

    mostrarListaOpcionesMostrar();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadOpciones);

        if (operador > minimaCantidadOpciones && operador < maxCantidadOpciones)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        mostrarAstronautaArchivo();
        break;

    case 2:
        mostrarAstronautasActivos();
        break;

    case 3:
        mostrarAstronautasRetirados();
        break;

    }

}

void mostrarListaOpcionesMostrar()
{
    printf("\n Seleccione la opcion que desee\n");
    printf("|1| Mostrar todos los astronautas\n");
    printf("|2| Mostrar astronautas en activo\n");
    printf("|3| Mostrar astronautas retirados\n");



}


void mostrarAstronautasActivos()
{

    astronauta astro;
    FILE* archi =  fopen(archiAstronauta, "rb");


    while (fread(&astro, sizeof(astronauta),1, archi) > 0)
    {

        if(astro.estado == 1)
        {

            mostrarDatosAstronauta(astro);

        }
    }

    fclose(archi);
}


void mostrarAstronautasRetirados()
{

    astronauta astro;

    FILE* archi = fopen(archiAstronauta, "rb");

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        if (astro.estado == 2)
        {

            mostrarDatosAstronauta(astro);
        }
    }


}



//---------------MENU DE MMODIFICACIONES--------------------
void menuModificacionesAstro()
{


    printf("\n|1| = Nombre \n");
    printf(  "|2| = Apellido\n");
    printf(  "|3| = Apodo\n");
    printf(  "|4| = Edad\n");
    printf(  "|5| = Nacionalidad\n");
    printf(  "|6| = Especialidad\n");
    printf(  "|7| = Horas de vuelo acumuladas\n");
    printf(  "|8| = Horas en la EEI\n");
    printf(  "|9| = Misiones Espaciales\n");
    printf(  "|10| = Estado\n");

}

//----------------CAMBIAR NOMBRE----------------------

void cambiarNombreAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();

    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarNombre(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;

        }
    }


    fclose(archi);
}


//----------CAMBIAR APELLIDO---------------
void cambiarApellidoAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();

    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarApellido(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;
        }
    }



    fclose(archi);
}

//----------------------CAMBIA APODO---------------------------------------------------------
void cambiarApodoAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();

    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarApodo(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;

        }
    }

    fclose(archi);
}


//--------------CAMBIAR ESTADO-------------------------

void cambiarEstadoAstronauta()
{
    astronauta astro;
    menuIDAstro();
    int id = idBuscadoAstro();
    int operador = -1;
    char strOpcion[maxCaracteres];


    FILE* archi = fopen(archiAstronauta, "r+b");

    printf("|1| DAR DE ALTA \n|2| DAR DE BAJA\n");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {

        operador = validacionNumeros(strOpcion,1,2);

        if (operador >= 1 && operador <= 2);
        {

            break;

        }
    }


    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        if(astro.ID == id)
        {
            astro.estado = operador;

            fseek(archi, sizeof(astronauta) * -1, SEEK_CUR);
            fwrite(&astro, sizeof(astronauta),1,archi);

            mostrarDatosAstronauta(astro);
            break;
        }
    }

    fclose(archi);
}


//------------------CAMBIAR EDAD--------------------------
void cambiarEdadAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();
    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarEdad(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;

        }
    }

    fclose(archi);
}

//----------CAMBIAR NACIONALIDA--------------
void cambiarNacionalidadAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();
    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarNacionalidad(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;

        }
    }

    fclose(archi);
}

//---------CAMBIAR ESPECIALIDAD------------------
void cambiarEspecialidadAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();
    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarEspecialidad(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;

        }
    }

    fclose(archi);
}




//------------------ASTRONAUTAS PREDETERMINADOS---------------------

void astronautasPredeterminados()
{

    FILE * archi = fopen(archiAstronauta, "wb");

    astronauta astroPredeterminado1;


    astroPredeterminado1.ID = 101;
    strcpy(astroPredeterminado1.nombre, "Neil");
    strcpy(astroPredeterminado1.apellido, "Armstrong");
    strcpy(astroPredeterminado1.apodo, "Kike");
    astroPredeterminado1.edad = 34;
    strcpy(astroPredeterminado1.nacionalidad, "Estados Unidos");
    strcpy(astroPredeterminado1.especialidad, "Piloto");
    astroPredeterminado1.horasVueloAcumuladas = 346;
    astroPredeterminado1.horasAcumuladasEEI = 2067;
    astroPredeterminado1.misionesEspacialesRealizadas = 23;
    astroPredeterminado1.estado = 1;

    fwrite(&astroPredeterminado1, sizeof(astronauta),1,archi);

    astronauta astroPredeterminado2;

    astroPredeterminado2.ID = 102;
    strcpy(astroPredeterminado2.nombre, "Juan");
    strcpy(astroPredeterminado2.apellido, "Rodriguez");
    strcpy(astroPredeterminado2.apodo, "Cachito");
    astroPredeterminado2.edad = 29;
    strcpy(astroPredeterminado2.nacionalidad, "Mexico");
    strcpy(astroPredeterminado2.especialidad, "Ingeniero Espacial");
    astroPredeterminado2.horasVueloAcumuladas = 115;
    astroPredeterminado2.horasAcumuladasEEI = 0;
    astroPredeterminado2.misionesEspacialesRealizadas = 2;
    astroPredeterminado2.estado = 1;

    fwrite(&astroPredeterminado2, sizeof(astronauta),1,archi);

    astronauta astroPredeterminado3;

    astroPredeterminado3.ID = 103;
    strcpy(astroPredeterminado3.nombre, "Agustin");
    strcpy(astroPredeterminado3.apellido, "Grillo");
    strcpy(astroPredeterminado3.apodo, "Maestro");
    astroPredeterminado3.edad = 51;
    strcpy(astroPredeterminado3.nacionalidad, "Argentina");
    strcpy(astroPredeterminado3.especialidad, "Piloto");
    astroPredeterminado3.horasVueloAcumuladas = 568;
    astroPredeterminado3.horasAcumuladasEEI = 3867;
    astroPredeterminado3.misionesEspacialesRealizadas = 45;
    astroPredeterminado3.estado = 2;


    fwrite(&astroPredeterminado3, sizeof(astronauta),1,archi);

    astronauta astroPredeterminado4;


    astroPredeterminado4.ID = 104;
    strcpy(astroPredeterminado4.nombre, "Zlatan");
    strcpy(astroPredeterminado4.apellido, "Olsen");
    strcpy(astroPredeterminado4.apodo, "Tanol");
    astroPredeterminado4.edad = 32;
    strcpy(astroPredeterminado4.nacionalidad, "Suecia");
    strcpy(astroPredeterminado4.especialidad, "Astrofisico");
    astroPredeterminado4.horasVueloAcumuladas = 46;
    astroPredeterminado4.horasAcumuladasEEI = 1867;
    astroPredeterminado4.misionesEspacialesRealizadas = 7;
    astroPredeterminado4.estado = 1;

    fwrite(&astroPredeterminado4, sizeof(astronauta),1,archi);


    fclose(archi);
}


//-------------------GUARDAR ASTRONAUTAS EN ARCHIVO--------------------


void mostrarAstronautaArchivo()
{

    astronauta astro;

    FILE *archi;

    archi = fopen(archiAstronauta, "rb");


    while (fread(&astro, sizeof(astronauta),1,archi) > 0)
    {
        mostrarDatosAstronauta(astro);
    }

    fclose(archi);

}


//FUNCION PRINCIPAL PARA CARGAR EL ASTRONAUTA--------------------------------------------------------------------------


void cargarAstronautaNuevo(astronauta* astro)
{

    FILE* archi;

    archi = fopen(archiAstronauta, "ab+");

    astro->ID = ultimoIdAstro();
    mostrarIDAstro();
    cargarNombre(astro);
    cargarApellido(astro);
    cargarApodo(astro);
    cargarEdad(astro);
    cargarNacionalidad(astro);
    cargarEspecialidad(astro);
    astro->horasVueloAcumuladas = 0;
    astro->horasAcumuladasEEI = 0;
    astro->misionesEspacialesRealizadas = 0;
    astro->estado = 1;



    fwrite(astro, sizeof(astronauta),1, archi);

    fclose(archi);
}
//---------------CARGAR ID-------------------------------------------------------------------------------------------



//------------------CONOCAR TAMAÑO DEL ARCHIVO------------------------

int ultimoIdAstro()
{
    astronauta aux;

    FILE *archi = fopen(archiAstronauta,"rb");
    if(archi == NULL || tamanoArchiAstro() == 0)
    {
        fclose(archi);
        return 1;
    }

    fseek(archi,(sizeof(astronauta) * -1),SEEK_END);
    fread(&aux,sizeof(astronauta),1,archi);

    return aux.ID + 1;

}

void mostrarIDAstro()
{

    int ID = ultimoIdAstro();
    printf("ID: %i", ID);

}



int tamanoArchiAstro()
{
    FILE *fich;

    fich=fopen(archiAstronauta,"rb");

    fseek(fich, 0, SEEK_END);
    fclose(fich);
    return ftell(fich)/sizeof(astronauta);

}


//FUNCION QUE CARGA Y VALIDA EL NOMBRE---------------------------------------------------------------------------------

void cargarNombre(astronauta* astro)
{
    char nombre[maxCaracteres];
    printf("\nNombre: ");

    fflush(stdin);
    gets(nombre);

    int valido = validacionString(nombre);


    if(valido == 1)
    {
        strcpy(astro->nombre, nombre);
    }

    else if(valido == 0)
    {

        while (valido == 0)
        {

            printf("Ingrese un nombre valido\nNombre: ");
            fflush(stdin);
            gets(nombre);

            valido = validacionString(nombre);

        }
    }

    strcpy(astro->nombre, nombre);
}
//---------------------------------------------------------------------------------------------------------------------

//VALIDA QUE EL STRING INGRESADO NO TENGA NUMEROS Y SEA UNICAMENTE LETRAS----------------------------------------------
int validacionString(char string[maxCaracteres])
{

    int cantidadCaracteres = strlen(string);
    int i;

    for (i = 0; i < cantidadCaracteres; i++)
    {
        char caracter = string[i];

        if (isalpha(caracter) == 0)
        {
            return 0;
        }
    }

    return 1;
}
//---------------------------------------------------------------------------------------------------------------------

//CARGA Y VALIDA EL APELLIDO-------------------------------------------------------------------------------------------
void cargarApellido(astronauta* astro)
{

    char apellido[maxCaracteres];

    printf("\nApellido: ");

    fflush(stdin);
    gets(apellido);
    int valido = validacionString(apellido);

    if(valido == 1)
    {
        strcpy(astro->apellido, apellido);
    }
    else if (valido == 0)
    {
        while (valido == 0)
        {

            printf("Inserte un apellido valido\nApellido: ");
            fflush(stdin);
            gets(apellido);

            valido = validacionString(apellido);
        }
    }

    strcpy(astro->apellido,apellido);
}
//---------------------------------------------------------------------------------------------------------------------

//CARGA Y VALIDA EL APODO----------------------------------------------------------------------------------------------
void cargarApodo(astronauta* astro)
{

    char apodo[maxCaracteres];

    printf("\nApodo: ");
    fflush(stdin);
    gets(apodo);

    int valido = validacionString(apodo);

    if(valido == 1)
    {

        strcpy(astro->apodo, apodo);

    }

    else if(valido == 0)
    {
        while(valido == 0)
        {
            printf("Ingrese un apodo valido\nApodo: ");
            fflush(stdin);
            gets(apodo);

            valido = validacionString(apodo);
        }
    }

    strcpy(astro->apodo, apodo);
}
//---------------------------------------------------------------------------------------------------------------------

//MUESTRA DATOS DEL ASTRONAUTA (FALTA COMPLETAR)-----------------------------------------------------------------------
void mostrarDatosAstronauta(astronauta astro)
{
    printf("\nID------------------------------- %i", astro.ID);
    printf("\nNOMBRE--------------------------- %s", astro.nombre);
    printf("\nAPELLIDO------------------------- %s", astro.apellido);
    printf("\nAPODO---------------------------- %s", astro.apodo);
    printf("\nEDAD----------------------------- %i", astro.edad);
    printf("\nNACIONALIDAD--------------------- %s", astro.nacionalidad);
    printf("\nESPECIALIDAD--------------------- %s", astro.especialidad);
    printf("\nHORAS DE VUELO ACUMULADAS-------- %i", astro.horasVueloAcumuladas);
    printf("\nHORAS ACUMULADAS DE EEI---------- %i", astro.horasAcumuladasEEI);
    printf("\nMISIONES ESPACIALES ACUMULADAS--- %i", astro.misionesEspacialesRealizadas);
    printf("\nESTADO |1|activo |2|inactivo----- %i", astro.estado);

    printf("\n");

}
//---------------------------------------------------------------------------------------------------------------------


//CARGA Y VALIDA LA NACIONALIDAD POR MEDIO DE UN MENU------------------------------------------------------------------

void cargarNacionalidad(astronauta* astro)
{

    int valido = 0;
    char nacionalidades[cantNacionalidades][maxCaracteres];
    int operador = -1;
    char strOpcion[maxCaracteres];



    baseNacionalidades(nacionalidades);
    char nacionalidad[maxCaracteres];

    printf("\nNacionalidad: ");
    fflush(stdin);
    gets(nacionalidad);

    valido = validacionNacionalidad(nacionalidad, nacionalidades);

    if(valido == 1)
    {

        strcpy(astro->nacionalidad, nacionalidad);
    }
    else if(valido == 0)
    {

        while(valido == 0)
        {

            printf("\nLas nacionalidades deben ser con la inicial en mayuscula\n");
            printf("\n|1| Escribir nuevamente \n");
            printf("|2| Menu de nacionalidades \n");
            fflush(stdin);
            gets(strOpcion);

            while(operador < 0 || valido == 0)
            {

                operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadMenu);

                if (operador >= minimaCantidadOpciones && operador <= maxCantidadMenu);
                {

                    break;

                }
            }

            if(operador == 2)
            {
                mostrarCatalogoNacionalidades(nacionalidades);
            }
            else if (operador == 1)
            {
                printf("\nNacionalidad: ");
                fflush(stdin);
                gets(nacionalidad);
                valido = validacionNacionalidad(nacionalidad, nacionalidades);

            }

        }

    }

    strcpy(astro->nacionalidad, nacionalidad);
}





//---------------------------------------------------------------------------------------------------------------------

//VALIDA QUE LA NACIONALIDAD INSERTADA SEA VALIDA CON RESPECTO A LOS PAISES ACTUALES DEL MUNDO-------------------------
int validacionNacionalidad(char nacionalidad[maxCaracteres], char nacionalidades[cantNacionalidades][maxCaracteres])
{

    int i;

    for(i = 0; i < cantNacionalidades; i++)
    {

        if(strcmp(nacionalidad, nacionalidades[i]) == 0)
        {
            return 1;
        }

    }

    return 0;
}
//---------------------------------------------------------------------------------------------------------------------



//CARGA EN LA MATRIZ INGRESADA TODOS LOS PAISES VALIDOS ACTUALMENTE----------------------------------------------------
void baseNacionalidades(char nacionalidades[cantNacionalidades][maxCaracteres])
{
    //15 A-------------------------------


    strcpy(nacionalidades[0],"Afganistan");
    strcpy(nacionalidades[1],"Albania");
    strcpy(nacionalidades[2],"Alemania");
    strcpy(nacionalidades[3],"Andorra");
    strcpy(nacionalidades[4],"Angola");
    strcpy(nacionalidades[5],"Antigua y Barbuda");
    strcpy(nacionalidades[6],"Antillas Holandesas");
    strcpy(nacionalidades[7],"Arabia Saudi");
    strcpy(nacionalidades[8],"Argelia");
    strcpy(nacionalidades[9],"Argentina");
    strcpy(nacionalidades[10],"Armenia");
    strcpy(nacionalidades[11],"Aruba");
    strcpy(nacionalidades[12],"Australia");
    strcpy(nacionalidades[13],"Austria");
    strcpy(nacionalidades[14],"Azerbaiyan");

    // 18 B------------------------------


    strcpy(nacionalidades[15],"Bahamas");
    strcpy(nacionalidades[16],"Bahrein");
    strcpy(nacionalidades[17],"Bangladesh");
    strcpy(nacionalidades[18],"Barbados");
    strcpy(nacionalidades[19],"Belgica");
    strcpy(nacionalidades[20],"Belice");
    strcpy(nacionalidades[21],"Benin");
    strcpy(nacionalidades[22],"Bermudas");
    strcpy(nacionalidades[23],"Bielorrusia");
    strcpy(nacionalidades[24],"Bolivia");
    strcpy(nacionalidades[25],"Botsuana");
    strcpy(nacionalidades[26],"Bosnia");
    strcpy(nacionalidades[27],"Brasil");
    strcpy(nacionalidades[28],"Brunei");
    strcpy(nacionalidades[29],"Bulgaria");
    strcpy(nacionalidades[30],"Burkina Faso");
    strcpy(nacionalidades[31],"Burundi");
    strcpy(nacionalidades[32],"Butan");



    //17 C-------------------------------


    strcpy(nacionalidades[33],"Cabo Verde");
    strcpy(nacionalidades[34],"Camboya");
    strcpy(nacionalidades[35],"Camerun");
    strcpy(nacionalidades[36],"Canada");
    strcpy(nacionalidades[37],"Catar");
    strcpy(nacionalidades[38],"Chile");
    strcpy(nacionalidades[39],"China");
    strcpy(nacionalidades[40],"Chipre");
    strcpy(nacionalidades[41],"Colombia");
    strcpy(nacionalidades[42],"Comoras");
    strcpy(nacionalidades[43],"Congo");
    strcpy(nacionalidades[44],"Corea del Norte");
    strcpy(nacionalidades[45],"Corea del Sur");
    strcpy(nacionalidades[46],"Costa de Marfil");
    strcpy(nacionalidades[47],"Costa Rica");
    strcpy(nacionalidades[48],"Croacia");
    strcpy(nacionalidades[49],"Cuba");



    //2 D--------------------------------


    strcpy(nacionalidades[50],"Dinamarca");
    strcpy(nacionalidades[51],"Dominica");

    //11 E-------------------------------

    strcpy(nacionalidades[52],"Ecuador");
    strcpy(nacionalidades[53],"Egipto");
    strcpy(nacionalidades[54],"El Salvador");
    strcpy(nacionalidades[55],"Emiratos Arabes");
    strcpy(nacionalidades[56],"Eritrea");
    strcpy(nacionalidades[57],"Eslovaquia");
    strcpy(nacionalidades[58],"Eslovenia");
    strcpy(nacionalidades[59],"Espana");
    strcpy(nacionalidades[60],"Estados Unidos");
    strcpy(nacionalidades[61],"Estonia");
    strcpy(nacionalidades[62],"Etiopia");

    //4 F--------------------------------

    strcpy(nacionalidades[63],"Fiyi");
    strcpy(nacionalidades[64],"Filipinas");
    strcpy(nacionalidades[65],"Finlandia");
    strcpy(nacionalidades[66],"Francia");


    //13 G-------------------------------

    strcpy(nacionalidades[67],"Gabon");
    strcpy(nacionalidades[68],"Gambia");
    strcpy(nacionalidades[69],"Georgia");
    strcpy(nacionalidades[70],"Ghana");
    strcpy(nacionalidades[71],"Grecia");
    strcpy(nacionalidades[72],"Guam");
    strcpy(nacionalidades[73],"Guatemala");
    strcpy(nacionalidades[74],"Guayana Francesa");
    strcpy(nacionalidades[75],"Guinea-Bissau");
    strcpy(nacionalidades[76],"Guinea Ecuatorial");
    strcpy(nacionalidades[77],"Guinea");
    strcpy(nacionalidades[78],"Guyana");
    strcpy(nacionalidades[79],"Granada");

    //5 H--------------------------------

    strcpy(nacionalidades[80],"Haiti");
    strcpy(nacionalidades[81],"Honduras");
    strcpy(nacionalidades[82],"Hong Kong");
    strcpy(nacionalidades[83],"Hungria");
    strcpy(nacionalidades[84],"Holanda");

    //12 I-------------------------------

    strcpy(nacionalidades[85],"India");
    strcpy(nacionalidades[86],"Indonesia");
    strcpy(nacionalidades[87],"Irak");
    strcpy(nacionalidades[88],"Iran");
    strcpy(nacionalidades[89],"Irlanda");
    strcpy(nacionalidades[90],"Islandia");
    strcpy(nacionalidades[91],"Islas Caiman");
    strcpy(nacionalidades[92],"Islas Marshall");
    strcpy(nacionalidades[93],"Islas Pitcairn");
    strcpy(nacionalidades[94],"Islas Salomon");
    strcpy(nacionalidades[95],"Israel");
    strcpy(nacionalidades[96],"Italia");

    //3 J--------------------------------

    strcpy(nacionalidades[97],"Jamaica");
    strcpy(nacionalidades[98],"Japon");
    strcpy(nacionalidades[99],"Jordania");

    //6 K--------------------------------

    strcpy(nacionalidades[100],"Kazajstan");
    strcpy(nacionalidades[101],"Kenia");
    strcpy(nacionalidades[102],"Kirguistan");
    strcpy(nacionalidades[103],"Kiribati");
    strcpy(nacionalidades[104],"Kosovo");
    strcpy(nacionalidades[105],"Kuwait");

    //9 L--------------------------------

    strcpy(nacionalidades[106],"Laos");
    strcpy(nacionalidades[107],"Lesotho");
    strcpy(nacionalidades[108],"Letonia");
    strcpy(nacionalidades[109],"Libano");
    strcpy(nacionalidades[110],"Liberia");
    strcpy(nacionalidades[111],"Libia");
    strcpy(nacionalidades[112],"Liechtenstein");
    strcpy(nacionalidades[113],"Lituania");
    strcpy(nacionalidades[114],"Luxemburgo");

    //19 M-------------------------------

    strcpy(nacionalidades[115],"Macedonia");
    strcpy(nacionalidades[116],"Madagascar");
    strcpy(nacionalidades[117],"Malasia");
    strcpy(nacionalidades[118],"Malawi");
    strcpy(nacionalidades[119],"Maldivas");
    strcpy(nacionalidades[120],"Mali");
    strcpy(nacionalidades[121],"Malta");
    strcpy(nacionalidades[122],"Marianas del Norte");
    strcpy(nacionalidades[123],"Marruecos");
    strcpy(nacionalidades[124],"Mauricio");
    strcpy(nacionalidades[125],"Mauritania");
    strcpy(nacionalidades[126],"Mexico");
    strcpy(nacionalidades[127],"Micronesia");
    strcpy(nacionalidades[128],"Monaco");
    strcpy(nacionalidades[129],"Moldavia");
    strcpy(nacionalidades[130],"Mongolia");
    strcpy(nacionalidades[131],"Montenegro");
    strcpy(nacionalidades[132],"Mozambique");
    strcpy(nacionalidades[133],"Myanmar");

    //8 N--------------------------------

    strcpy(nacionalidades[134],"Namibia");
    strcpy(nacionalidades[135],"Nauru");
    strcpy(nacionalidades[136],"Nepal");
    strcpy(nacionalidades[137],"Nicaragua");
    strcpy(nacionalidades[138],"Niger");
    strcpy(nacionalidades[139],"Nigeria");
    strcpy(nacionalidades[140],"Noruega");
    strcpy(nacionalidades[141],"Nueva Zelanda");

    //2 O--------------------------------

    strcpy(nacionalidades[142],"Oman");
    strcpy(nacionalidades[143],"Orden de Malta");

    //11 P-------------------------------

    strcpy(nacionalidades[144],"Paises Bajos");
    strcpy(nacionalidades[145],"Pakistan");
    strcpy(nacionalidades[146],"Palestina");
    strcpy(nacionalidades[147],"Palau");
    strcpy(nacionalidades[148],"Panama");
    strcpy(nacionalidades[149],"Papua Nueva Guinea");
    strcpy(nacionalidades[150],"Paraguay");
    strcpy(nacionalidades[151],"Peru");
    strcpy(nacionalidades[152],"Polonia");
    strcpy(nacionalidades[153],"Portugal");
    strcpy(nacionalidades[154],"Puerto Rico");

    //9 R--------------------------------

    strcpy(nacionalidades[155],"Reino Unido");
    strcpy(nacionalidades[156],"Republica Centroafricana");
    strcpy(nacionalidades[157],"Republica Checa");
    strcpy(nacionalidades[158],"Republica del Congo");
    strcpy(nacionalidades[159],"Republica Democratica del Congo");
    strcpy(nacionalidades[160],"Republica Dominicana");
    strcpy(nacionalidades[161],"Ruanda");
    strcpy(nacionalidades[162],"Rumania");
    strcpy(nacionalidades[163],"Rusia");

    //22 S-------------------------------

    strcpy(nacionalidades[164],"Sahara Occidental");
    strcpy(nacionalidades[165],"Samoa Americana");
    strcpy(nacionalidades[166],"Samoa");
    strcpy(nacionalidades[167],"San Cristobal y Nieves");
    strcpy(nacionalidades[168],"San Marino");
    strcpy(nacionalidades[169],"Santa Lucia");
    strcpy(nacionalidades[170],"Santo Tome y Principe");
    strcpy(nacionalidades[171],"San Vicente y las Granadinas");
    strcpy(nacionalidades[172],"Senegal");
    strcpy(nacionalidades[173],"Serbia");
    strcpy(nacionalidades[174],"Seychelles");
    strcpy(nacionalidades[175],"Sierra Leona");
    strcpy(nacionalidades[176],"Singapur");
    strcpy(nacionalidades[177],"Siria");
    strcpy(nacionalidades[178],"Somalia");
    strcpy(nacionalidades[179],"Sri Lanka");
    strcpy(nacionalidades[180],"Sudafrica");
    strcpy(nacionalidades[181],"Sudan");
    strcpy(nacionalidades[182],"Sudan del Sur");
    strcpy(nacionalidades[183],"Suecia");
    strcpy(nacionalidades[184],"Suiza");
    strcpy(nacionalidades[185],"Suazilandia");

    //13 T-------------------------------

    strcpy(nacionalidades[186],"Tilandia");
    strcpy(nacionalidades[187],"Taiwan");
    strcpy(nacionalidades[188],"Tanzania");
    strcpy(nacionalidades[189],"Tayikistan");
    strcpy(nacionalidades[190],"Tibet");
    strcpy(nacionalidades[191],"Timor Oriental");
    strcpy(nacionalidades[192],"Togo");
    strcpy(nacionalidades[193],"Tonga");
    strcpy(nacionalidades[194],"Trinidad y Tobago");
    strcpy(nacionalidades[195],"Tunez");
    strcpy(nacionalidades[196],"Turkmenistan");
    strcpy(nacionalidades[197],"Turquia");
    strcpy(nacionalidades[198],"Tuvalu");

    //4 U--------------------------------

    strcpy(nacionalidades[199],"Ucrania");
    strcpy(nacionalidades[200],"Uganda");
    strcpy(nacionalidades[201],"Uruguay");
    strcpy(nacionalidades[202],"Uzbequistan");

    //4 V--------------------------------

    strcpy(nacionalidades[203],"Vanuatu");
    strcpy(nacionalidades[204],"Vaticano");
    strcpy(nacionalidades[205],"Venezuela");
    strcpy(nacionalidades[206],"Vietnam");

    //1 W--------------------------------


    strcpy(nacionalidades[207],"Wallis y Futuna");

    //2 Y--------------------------------

    strcpy(nacionalidades[208],"Yemen");
    strcpy(nacionalidades[209],"Yibuti");

    //3 Z--------------------------------

    strcpy(nacionalidades[210],"Zambia");
    strcpy(nacionalidades[211],"Zaire");
    strcpy(nacionalidades[212],"Zimbabue");
}
//---------------------------------------------------------------------------------------------------------------------


//CARGA Y VALIDA LA EDAD HACIENDO QUE SEA MAYOR DE 18 Y MENOR DE 100 AÑOS----------------------------------------------
void cargarEdad(astronauta* astro)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\nEDAD: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,edadMinima,edadMaxima);

        if (operador > edadMinima && operador < edadMaxima)
        {
            astro->edad = operador;
            break;
        }
    }

}
//---------------------------------------------------------------------------------------------------------------------




//---------------------------------------------------------------------------------------------------------------------


//MUESTRA EL CATALOGO DE 213 PAISES Y LE ASIGNA UN VALOR PARA INSERTAR A CADA UNO DE ELLOS-----------------------------
void mostrarCatalogoNacionalidades(char nacionalidades[cantNacionalidades][maxCaracteres])
{

    int i = 0;

    printf("\nLISTA DE PAISES: \n");

    while(i < cantNacionalidades)
    {
        printf("%s\n", nacionalidades[i]);
        i++;
    }
}
//---------------------------------------------------------------------------------------------------------------------



//CARGA LA ESPECIALIDAD POR MEDIO DE UN MENU---------------------------------------------------------------------------
void  cargarEspecialidad(astronauta* astro)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char especialidades[cantEspecialidades][maxCaracteres];
    especialidadesAstronauta(especialidades);


    printf("Seleccione un numero asociado a una especialidad\n");
    mostrarEspecialidades(especialidades);

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantEspecialidades);

        if (operador >= minimaCantidadOpciones && operador <= cantEspecialidades)
        {
            strcpy(astro->especialidad,especialidades[operador - 1]);
            break;
        }
    }


}


//---------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------


//MUESTRA LA ESPECIALIDADES Y LE ASIGNA UN NUMERO A CADA UNO PARA INSERTAR Y ESCOGER UNA ESPECUALIDAD------------------
void mostrarEspecialidades(char especialidades[][maxCaracteres])
{



    int i = 0;
    int pos = 1;

    while (i< cantEspecialidades)
    {

        printf( "%i = ", pos);
        printf("%s \n", especialidades[i]);

        pos++;
        i++;
    }

}
//---------------------------------------------------------------------------------------------------------------------


//CARGA EN UNA MATRIZ INSERTADA LAS ESPECIALIDADES QUE LUEGO PODRAN SER ESCOGIDAS--------------------------------------
void especialidadesAstronauta(char especialidades[][maxCaracteres])
{


    printf("\n");
    strcpy(especialidades[0], "Piloto");
    strcpy(especialidades[1], "Astrofisico");
    strcpy(especialidades[2], "Ingeniero Espacial");
    strcpy(especialidades[3], "Biologo");
    strcpy(especialidades[4], "Comericial");

}



//BUSCA EL ASTRONAUTA QUE PERTENEZCA AL ID CORRESPONDIENT-------
void buscarAstronautaPorId()
{
    menuIDAstro();
    int id = idBuscadoAstro();


    FILE* archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {
        if(astro.ID == id)
        {

            mostrarDatosAstronauta(astro);
            break;
        }
    }
    fclose(archi);
}

//EN CASO DE NO QUERER REALIZAR MAS OPERACIONES("no") MANDA UN SALUDO
void saludoFinal(char valor[2])
{

    if(strcmp(valor, "no") == 0)
    {

        printf("\n\n-------NOS VEMOS LA PROXIMA-------\n\n");
    }
}


//CAMBIA LAS HORAS DE VUELO
void cambiarHorasVueloAcumuladasAstronauta()
{
    menuIDAstro();
    int id = idBuscadoAstro();
    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarHorasVueloAcumuladas(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;
        }
    }

    fclose(archi);
}

//CARGA LAS HORAS DE VUELO ACUMULADAS
void cargarHorasVueloAcumuladas(astronauta *astro)
{

    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("\nCantidad de horas de vuelo acumuladas: ");
    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador >= minimaCantidadOpciones && operador < maxCantidadHoras)
        {
            astro->horasVueloAcumuladas = operador;
            break;
        }
    }


}


//CARGA HORAS EN EEI
void cargarHorasEnEEI(astronauta *astro)
{

    int operador = -1;
    char strOpcion[maxCaracteres];



    printf("\ncantidad de horas en la EEI: ");
    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador >= minimaCantidadOpciones && operador < maxCantidadHoras)
        {
            astro->horasAcumuladasEEI = operador;
            break;
        }
    }



}




//CAMBIA LAS HORAS EN EEI
void cambiarHorasEnEEI()
{


    menuIDAstro();
    int id = idBuscadoAstro();
    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))

    {


        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarHorasEnEEI(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;
        }

    }
    fclose(archi);

}

//CARGA LAS MISIONES ESPACIALES REALIZADAS
void cargarMisionesEspaciales(astronauta *astro)
{

    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("\ncantidad de misiones Espaciales\nMISIONES:  ");
    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxcantidadViajes);

        if (operador >= minimaCantidadOpciones && operador < maxcantidadViajes)
        {
            astro->misionesEspacialesRealizadas = operador;
            break;
        }
    }


}

//CAMBIA LA CANTIDAD DE MISIONES ESPACIALES REALIZADAS
void cambiarMisionesEspaciales()
{
    menuIDAstro();
    int id = idBuscadoAstro();
    astronauta astro;

    FILE * archi = fopen(archiAstronauta, "r+b");

    while (fread(&astro, sizeof(astronauta),1, archi))
    {

        if(astro.ID == id)
        {

            fseek(archi,sizeof(astronauta) * -1, SEEK_CUR);

            cargarMisionesEspaciales(&astro);

            fwrite(&astro, sizeof(astronauta),1, archi);

            mostrarDatosAstronauta(astro);
            break;
        }
    }

    fclose(archi);
}





//MUESTRA LA LISTA DE LOS ID EXISTENTE
void mostrarListaIDAstro()
{
    FILE* archi;

    archi = fopen(archiAstronauta, "rb");
    astronauta astro;

    while (fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        printf("ID: %i\n", astro.ID);
    }

    fclose(archi);
}



void menuIDAstro()
{

    int opera = -1;
    char strOpcion[maxCaracteres];


    printf("\n|1|  Para ver menu de id \n|2|  Para seguir\n");
    fflush(stdin);
    gets(strOpcion);

    while(opera < 0)
    {
        opera = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadMenu);

        if (opera >= minimaCantidadOpciones && opera <= maxCantidadMenu)
        {
            break;
        }
    }

    if (opera == 1)
    {
        printf("\n");

        mostrarListaIDAstro();

        printf("\n");
    }

    else if (opera == 2)
    {
        return;

    }
}




int idBuscadoAstro()
{

    int valido = 0;
    int operador = -1;
    char strOpcion[maxCaracteres];
    int maxIdAstronauta =  ultimoIdAstro() -1;

    valido = validacionIDAstro(operador);


    while (valido == 0 && (operador < minIdAstro || operador > maxIdAstronauta))
    {

        printf("Inserte el ID del Astronauta: ");
        fflush(stdin);
        gets(strOpcion);


        operador = validacionNumeros(strOpcion,minIdAstro,maxIdAstronauta);

        valido = validacionIDAstro(operador);

        if (operador >= minIdAstro && operador <= maxIdAstronauta && valido == 1)
        {

            return operador;

        }
    }
    return 0;
}



int validacionIDAstro(int id)
{



    FILE* archi;

    archi = fopen(archiAstronauta, "rb");

    astronauta astro;

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {

        if(id == astro.ID)
        {

            return 1;
        }

    }

    return 0;
}






//------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------NAVES----------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------


void cargarTipoNave(nave* nav)
{

    int operador = -1;
    char strOpcion[maxCaracteres];


    char tiposNave[cantTiposNave][maxCaracteres];
    menuTiposNave(tiposNave);

    printf("Seleccione el tipo de nave \n");
    mostrarTipoNave(tiposNave);

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantTiposNave);

        if (operador >= minimaCantidadOpciones && operador <= cantTiposNave)
        {
            strcpy(nav->tipoNave, tiposNave[operador - 1]);
            break;
        }
    }
}


void mostrarTipoNave(char tiposNaves[cantTiposNave][maxCaracteres])
{

    int i = 0;
    int pos = 1;

    while (i< cantTiposNave)
    {

        printf( "%i = ", pos);
        printf("%s \n", tiposNaves[i]);

        pos++;
        i++;
    }
}



void menuTiposNave(char tiposNave[cantTiposNave][maxCaracteres])
{

    printf("\n");
    strcpy(tiposNave[0], "Starship");
    strcpy(tiposNave[1], "Falcon 9");
    strcpy(tiposNave[2], "Falcon Heavy");
}




void tiposEstado(char estados[cantEstados][maxCaracteres])
{
    printf("\n");
    strcpy(estados[0], "Mantenimiento");
    strcpy(estados[1], "Lista para su uso");
    strcpy(estados[2], "Mision");
    strcpy(estados[3], "De baja");
}



void mostrarEstados(char estados[cantEstados][maxCaracteres])
{

    int i = 0;
    int pos = 1;

    while (i < cantEstados)
    {


        printf("|%i| %s \n",pos, estados[i]);

        pos++;
        i++;
    }
}




void  cargarEstado(nave* nav)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estados[cantEstados][maxCaracteres];
    tiposEstado(estados);


    printf("Seleccione un numero asociado a un estado\n");
    mostrarEstados(estados);

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantEstados);

        if (operador >= minimaCantidadOpciones && operador <= cantEstados)
        {
            strcpy(nav->estado,estados[operador - 1]);
            break;
        }
    }


}




//----------------------------------------------------------------------------------------


int idBuscadoNave()
{

    int valido = 0;
    int operador = -1;
    char strOpcion[maxCaracteres];
    int maxIdNave =  ultimoIdNave() -1;

    valido = validacionIDNave(operador);


    while (valido == 0 && (operador < minIdNave || operador > maxIdNave))
    {

        printf("Inserte el ID de la nave: ");
        fflush(stdin);
        gets(strOpcion);

        operador = validacionNumeros(strOpcion,minIdNave,maxIdNave);

        valido = validacionIDAstro(operador);

        if (operador >= minIdNave && operador <= maxIdNave && valido == 1)
        {

            return operador;

        }
    }

}

int tamanoArchiNave()
{
    FILE *fich =fopen(archiNave,"rb");

    fseek(fich, 0, SEEK_END);
    fclose(fich);
    return ftell(fich)/sizeof(stMision);

}
int ultimoIdNave()
{
    nave aux;

    FILE *archi = fopen(archiNave,"rb");
    if(archi == NULL || tamanoArchiNave() == 0)
    {
        fclose(archi);
        return 1;
    }

    fseek(archi,(sizeof(nave) * -1),SEEK_END);
    fread(&aux,sizeof(nave),1,archi);

    return aux.ID + 1;

}

int validacionIDNave(int id)
{


    FILE* archi;

    archi = fopen(archiNave, "rb");

    nave aux;

    while(fread(&aux, sizeof(nave), 1, archi) > 0)
    {

        if(id == aux.ID)
        {

            return 1;
        }

    }


}


void mostrarIDNave()
{

    int ID = ultimoIdNave();
    printf("\nID: %i", ID );

}





void cargarNuevaNave(nave* nav)
{

    FILE* archi = fopen(archiNave, "ab");

    nav->ID = ultimoIdNave();
    mostrarIDNave();
    cargarTipoNave(nav);
    strcpy(nav->estado, "Lista para su uso");
    nav->cantVuelosRealizados  = 0;
    nav->horasAcumuladasVuelo = 0;


    fwrite(nav, sizeof(nave),1, archi);


    fclose(archi);
}



void mostrarNaves()
{


    int operador = -1;
    char strOpcion[maxCaracteres];

    mostrarListaOpcionesMostrarNave();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantEstadosNave);

        if (operador > minimaCantidadOpciones && operador < cantEstadosNave)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        mostrarArchivoNaves();
        break;
    case 2:
        mostrarNavesEnMision();
        break;
    case 3:
        mostrarNavesEnMantenimiento();
        break;
    case 4:
        mostrarNavesListas();
        break;
    case 5:
        mostrarNavesRetiradas();
        break;

    }
}

void mostrarArchivoNaves()
{

    FILE * archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        mostrarDatosNave(nav);

    }

    fclose(archi);
}

void mostrarNavesEnMision()
{

    int veces = 0;
    FILE * archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        if(strcmp(nav.estado,"Mision") == 0)
        {

            mostrarDatosNave(nav);
            veces++;
        }

    }
    if(veces ==0)
    {
        printf("No hay ninguna nave en mision");
    }

    fclose(archi);
}


void mostrarNavesEnMantenimiento()
{
    int veces = 0;
    FILE * archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        if (strcmp(nav.estado, "Mantenimiento") == 0)
        {
            mostrarDatosNave(nav);
            veces++;

        }
    }

    if(veces == 0)
    {
        printf("Actualmente no hay naves en mantenimiento");
    }

    fclose(archi);
}

void mostrarNavesRetiradas()
{
    int veces = 0;
    FILE * archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {
        if(strcmp(nav.estado,"De baja") == 0)

            mostrarDatosNave(nav);
        veces++;

    }
    if(veces == 0)
    {

        printf("Actualmente no hay naves dadas de baja");
    }

    fclose(archi);
}

void mostrarNavesListas()
{
    int veces = 0;
    FILE * archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        if(strcmp(nav.estado, "Lista para su uso") == 0)
        {
            mostrarDatosNave(nav);
            veces++;
        }
    }

    if (veces == 0)
    {
        printf("Actualmente no hay naves listas para usar");
    }

    fclose(archi);
}


void mostrarListaOpcionesMostrarNave()
{
    printf("\n Seleccione la opcion que desee\n");
    printf("|1| Mostrar todas las naves\n");
    printf("|2| Mostrar naves en mision\n");
    printf("|3| Mostrar naves en mantenimiento\n");
    printf("|4| Mostrar naves listas\n");
    printf("|5| Mostrar naves retiradas\n");
}




//----------------------------------------------------------------------------------------

void mostrarDatosNave(nave nav)
{

    printf("\n\nID: %i", nav.ID);
    printf("\nTIPO DE NAVE: %s", nav.tipoNave);
    printf("\nESTADO: %s", nav.estado);
    printf("\nHORAS ACUMULADAS : %i", nav.horasAcumuladasVuelo);
    printf("\nVUELOS REALIZADOS: %i\n\n", nav.cantVuelosRealizados);

}


void buscarNavePorId()
{
    menuIDNave();
    int id = idBuscadoNave();


    FILE* archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {
        if(nav.ID == id)
        {

            mostrarDatosNave(nav);
            break;
        }
    }
    fclose(archi);
}




void mostrarListaIDNave()
{
    FILE* archi = fopen(archiNave, "rb");
    nave nav;

    while (fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        printf("ID: %i\n", nav.ID);
    }

    fclose(archi);
}



void menuIDNave()
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n|1|  Para ver menu de id \n|2|  Para seguir\n");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadMenu);

        if (operador > minimaCantidadOpciones && operador < maxCantidadMenu)
        {
            break;
        }
    }


    if (operador == 1)
    {
        printf("\n");

        mostrarListaIDNave();

        printf("\n");
    }

    else if (operador == 2)
    {
        return;

    }


}




void menuModificacionesNave()
{


    printf("\n|1| = Modificar tipo de Nave \n");
    printf(  "|2| = Modificar Estado\n");
    printf(  "|3| = Modificar cantidad de vuelos realizados\n");
    printf(  "|4| = Modificar horas de vuelo acumuladas\n");


}


void modificarNave()
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    FILE * archi = fopen(archiNave, "r+b");

    printf("Seleccione el aspecto que desea modificar de la nave: ");
    menuModificacionesNave();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = -1;
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadModificacionesNave);

        if (operador > minimaCantidadOpciones && operador < maxCantidadModificacionesNave)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        cambiarTipoNave();
        break;

    case 2:
        cambiarEstadoNave();
        break;

    case 3:
        cambiarVuelosHechosNave();
        break;

    case 4:
        cambiarHorasVueloAcumuladasNave();
        break;


    default:
        printf("El numero ingresado no corresponde con las opciones");
        break;
    }

    fclose(archi);
}


void cambiarTipoNave()
{
    menuIDNave();
    int id = idBuscadoNave();
    nave nav;

    FILE * archi = fopen(archiNave, "r+b");

    while (fread(&nav, sizeof(nave),1, archi) > 0)
    {

        if(nav.ID == id)
        {

            fseek(archi,sizeof(nave) * -1, SEEK_CUR);

            cargarTipoNave(&nav);

            fwrite(&nav, sizeof(nave),1, archi);

            mostrarDatosNave(nav);
            break;

        }
    }

    fclose(archi);
}





void cambiarHorasVueloAcumuladasNave()
{
    menuIDNave();
    int id = idBuscadoNave();
    nave nav;
    FILE * archi = fopen(archiNave, "r+b");

    while (fread(&nav, sizeof(nave),1, archi))
    {

        if(nav.ID == id)
        {

            fseek(archi,sizeof(nave) * -1, SEEK_CUR);

            cargarHorasVueloAcumuladasNave(&nav);

            fwrite(&nav, sizeof(nave),1, archi);

            mostrarDatosNave(nav);
            break;
        }
    }

    fclose(archi);
}



void cargarHorasVueloAcumuladasNave(nave* nav)
{

    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("\nCantidad de horas de vuelo acumuladas: ");
    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador >= minimaCantidadOpciones && operador < maxCantidadHoras)
        {
            nav->horasAcumuladasVuelo = operador;
            break;
        }
    }
}




void cargarCantVuelosHechosNave(nave* nav)
{

    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("\nCantidad de vuelos realizados: ");
    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxcantidadViajes);

        if (operador >= minimaCantidadOpciones && operador < maxcantidadViajes)
        {
            nav->cantVuelosRealizados = operador;
            break;
        }
    }
}


void cambiarVuelosHechosNave()
{
    menuIDNave();
    int id = idBuscadoNave();
    nave nav;
    FILE * archi = fopen(archiNave, "r+b");

    while (fread(&nav, sizeof(nave),1, archi))
    {

        if(nav.ID == id)
        {

            fseek(archi,sizeof(nave) * -1, SEEK_CUR);

            cargarCantVuelosHechosNave(&nav);

            fwrite(&nav, sizeof(nave),1, archi);

            mostrarDatosNave(nav);
            break;
        }
    }

    fclose(archi);
}




void menuOpcionesFuncionesNave()
{


    printf("|1| CARGAR NUEVA NAVE\n");
    printf("|2| BUSCAR NAVE POR ID\n");
    printf("|3| CAMBIAR ESTADO NAVE\n");
    printf("|4| MODIFICAR NAVE\n");
    printf("|5| MOSTRAR NAVES \n");
    printf("|6| CONSULTAR NAVE\n");

}

void funcionNaves()
{
    nave nav;


    char valor[] = "si";
    int operador;
    char strOpcion[maxCaracteres];

    while(strcmp(valor, "si") == 0)
    {

        operador = -1;
        printf("Insertar operacion a realizar:\n");

        menuOpcionesFuncionesNave();
        gets(strOpcion);


        while(operador < 0)
        {
            operador = validacionNumeros(strOpcion,minimaCantidadOpciones,6);

            if (operador > minimaCantidadOpciones && operador <= 6)
            {
                break;
            }
        }


        switch(operador)
        {

        case 1:
            cargarNuevaNave(&nav);

            break;

        case 2:
            buscarNavePorId();
            break;

        case 3:
            cambiarEstadoNave();
            break;

        case 4:
            modificarNave();
            break;

        case 5:
            mostrarNaves();
            break;
        case 6:
            consultarNaves();

            break;
        }

        printf("\n Ingrese 'si', para hacer una nueva operacion con naves\n Ingrese 'no', para dejar de operar con naves\n ");
        fflush(stdin);
        gets(valor);


        while (strcmp(valor, "si") != 0 && strcmp(valor, "no") != 0 )
        {
            printf("Ingrese una opcion valida: ");
            fflush(stdin);
            gets(valor);
        }
    }

}

void consultarNaves()
{

    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione el aspecto que desea consultar de las naves: ");
    menuConsultasNave();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,5);

        if (operador > minimaCantidadOpciones && operador < 5)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        buscarNavePorId();
        break;

    case 2:
        buscarNavePorTipo();
        break;

    case 3:
        buscarNavePorVuelos();
        break;

    case 4:
        buscarNavePorHoras();
        break;

    case 5:
        buscarNavesPorEstado();
        break;


    default:
        printf("El numero ingresado no corresponde con las opciones");
        break;
    }


}

void menuConsultasNave()
{

    printf("\n|1| Buscar nave por ID\n");
    printf("|2| Buscar nave por Tipo\n");
    printf("|3| Buscar nave por Vuelos\n");
    printf("|4| Buscar nave por Horas\n");
    printf("|5| Buscar nave por Estado\n");

}


void buscarNavesPorEstado()
{

    nave nav;
    nave aux;
    int veces = 0;


    cargarEstado(&aux);

    FILE * archi = fopen(archiNave, "rb");

    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        if (strcmp(nav.estado, aux.estado) == 0)
        {

            mostrarDatosNave(nav);
            veces++;
        }

    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }

}

void buscarNavePorTipo()
{

    nave nav;
    nave aux;
    int veces = 0;

    cargarTipoNave(&aux);

    FILE * archi = fopen(archiNave, "rb");

    while (fread(&nav, sizeof(nave), 1, archi) >0)
    {

        if (strcmp(nav.tipoNave, aux.tipoNave) == 0)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }

    fclose(archi);
}



void buscarNavePorVuelos()
{


    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione de que forma quiere buscar: ");
    menuConsultaViajesAstro();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantidadTipoBusquedaEdad);

        if (operador > minimaCantidadOpciones && operador < cantidadTipoBusquedaEdad)
        {
            break;
        }
    }

    switch(operador)
    {

    case 1:
        consultarVuelosExactoNave();
        break;

    case 2:
        consultarMayoresVuelosNave();
        break;
    case 3:
        consultarMenoresVuelosNAve();
        break;

    }

}


void consultarVuelosExactoNave()
{

    int valido = 0;
    nave nav;
    nave aux;
    int veces = 0;

    FILE* archi = fopen(archiNave,"rb");


    mostrarListaVuelosNave();

    while (valido == 0)
    {
        cargarCantVuelosHechosNave(&aux);
        valido = validarVuelosNave(aux.cantVuelosRealizados);

    }
    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {


        if ( nav.cantVuelosRealizados == aux.cantVuelosRealizados)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }

}

int validarVuelosNave(int vuelos)
{

    FILE * archi = fopen(archiNave, "rb");
    nave nav;

    while (fread(&nav, sizeof(nave),1, archi) > 0)
    {


        if (nav.cantVuelosRealizados == vuelos)
        {

            return 1;
        }

    }
    return 0;
}

void mostrarListaVuelosNave()
{

    nave nav;
    FILE * archi = fopen(archiNave, "rb");


    printf("\nLista de Cantidad de Vuelos Realizados \n");

    while (fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        printf("- %i\n", nav.cantVuelosRealizados);

    }

    fclose(archi);

}


void consultarMayoresVuelosNave()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la cantidad de vuelos minima\nVUELOS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {

            break;
        }
    }
    FILE *archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi))
    {



        if (nav.cantVuelosRealizados >= operador)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }
    fclose(archi);
}

void consultarMenoresVuelosNAve()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la maxima cantidad de vuelos\nVUELOS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadHoras);

        if (operador > minimaCantidadOpciones && operador < maxCantidadHoras)
        {

            break;
        }
    }
    FILE *archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi))
    {



        if (nav.cantVuelosRealizados <= operador)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }
    fclose(archi);
}



void buscarNavePorHoras()
{


    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione de que forma quiere buscar: ");
    menuConsultasHorasNave();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantidadTipoBusquedaEdad);

        if (operador > minimaCantidadOpciones && operador < cantidadTipoBusquedaEdad)
        {
            break;
        }
    }

    switch(operador)
    {

    case 1:
        consultarHorasExactoNave();
        break;

    case 2:
        consultarMayoresHorasNave();
        break;
    case 3:
        consultarMenoresHorasNave();
        break;

    }

}

void menuConsultasHorasNave()
{

    printf("\n|1| Buscar Horas de vuelo Exactas\n");
    printf("|2| Buscar Horas de vuelo mayores\n");
    printf("|3| Buscar Horas de vuelo Menores\n");

}

void  consultarHorasExactoNave()
{

    int valido = 0;
    nave nav;
    nave aux;
    int veces = 0;

    FILE* archi = fopen(archiNave,"rb");


    mostrarListaHorasNave();

    while (valido == 0)
    {
        cargarHorasVueloAcumuladasNave(&aux);
        valido = validarHorasNave(aux.horasAcumuladasVuelo);

    }
    while(fread(&nav, sizeof(nave), 1, archi) > 0)
    {


        if ( nav.horasAcumuladasVuelo == aux.horasAcumuladasVuelo)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }

}

int validarHorasNave(int vuelos)
{

    FILE * archi = fopen(archiNave, "rb");
    nave nav;

    while (fread(&nav, sizeof(nave),1, archi) > 0)
    {


        if (nav.horasAcumuladasVuelo == vuelos)
        {

            return 1;
        }

    }
    return 0;
}

void mostrarListaHorasNave()
{

    nave nav;
    FILE * archi = fopen(archiNave, "rb");


    printf("\nLista de Cantidad de Horas en Vuelo \n");

    while (fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        printf("- %i\n", nav.horasAcumuladasVuelo);

    }

    fclose(archi);

}


void consultarMayoresHorasNave()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la cantidad de horas minima\nHORAS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxcantidadViajes);

        if (operador > minimaCantidadOpciones && operador < maxcantidadViajes)
        {

            break;
        }
    }
    FILE *archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi))
    {



        if (nav.horasAcumuladasVuelo >= operador)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }
    fclose(archi);
}

void consultarMenoresHorasNave()
{

    int operador = -1;
    char strOpcion[maxCaracteres];
    int veces = 0;

    printf("\nIngrese la maxima cantidad de horas\nHORAS: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxcantidadViajes);

        if (operador > minimaCantidadOpciones && operador < maxcantidadViajes)
        {

            break;
        }
    }
    FILE *archi = fopen(archiNave, "rb");

    nave nav;

    while(fread(&nav, sizeof(nave), 1, archi))
    {



        if (nav.horasAcumuladasVuelo <= operador)
        {

            mostrarDatosNave(nav);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }
    fclose(archi);
}





void cambiarEstadoNave()
{


    menuIDNave();
    int id = idBuscadoNave();
    nave nav;
    FILE * archi = fopen(archiNave, "r+b");

    while (fread(&nav, sizeof(nave),1, archi))
    {

        if(nav.ID == id)
        {

            fseek(archi,sizeof(nave) * -1, SEEK_CUR);

            cargarEstado(&nav);
            fwrite(&nav, sizeof(nave),1, archi);

            mostrarDatosNave(nav);
            break;
        }
    }

    fclose(archi);



}



void navesPredeterminadas()
{

    FILE * archi = fopen(archiNave, "wb");

    nave navPredeterminado1;


    navPredeterminado1.ID = 1001;
    strcpy(navPredeterminado1.tipoNave, "Starship");
    strcpy(navPredeterminado1.estado, "Mantenimiento");
    navPredeterminado1.horasAcumuladasVuelo = 114;
    navPredeterminado1.cantVuelosRealizados = 7;


    fwrite(&navPredeterminado1, sizeof(nave),1,archi);

    nave navPredeterminado2;

    navPredeterminado2.ID = 1002;
    strcpy(navPredeterminado2.tipoNave, "Falcon 9");
    strcpy(navPredeterminado2.estado, "Mision");
    navPredeterminado2.horasAcumuladasVuelo = 55;
    navPredeterminado2.cantVuelosRealizados = 3;


    fwrite(&navPredeterminado2, sizeof(nave),1,archi);


    nave navPredeterminado3;

    navPredeterminado3.ID = 1003;
    strcpy(navPredeterminado3.tipoNave, "Falcon Heavy");
    strcpy(navPredeterminado3.estado, "Mision");
    navPredeterminado3.horasAcumuladasVuelo = 200;
    navPredeterminado3.cantVuelosRealizados = 11;


    fwrite(&navPredeterminado3, sizeof(nave),1,archi);


    nave navPredeterminado4;


    navPredeterminado4.ID = 1004;
    strcpy(navPredeterminado4.tipoNave, "Falcon 9");
    strcpy(navPredeterminado4.estado, "De baja");
    navPredeterminado4.horasAcumuladasVuelo = 350;
    navPredeterminado4.cantVuelosRealizados = 17;


    fwrite(&navPredeterminado4, sizeof(nave),1,archi);



    fclose(archi);
}


//-----------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------
//----------------------------------------MISIONES-----------------------------------------------------
//-----------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------




void menuOpcionesFuncionesMisiones()
{


    printf("|1| CARGAR NUEVA MISION\n");
    printf("|2| BUSCAR MISION POR ID\n");
    printf("|3| CAMBIAR ESTADO DE MISION\n");
    printf("|4| MODIFICAR MISION\n");
    printf("|5| MOSTRAR MISIONES \n");
    printf("|6| CONSULTAR MISION \n");

}

void funcionMisiones()
{
    stMision misio;


    char valor[] = "si";
    int operador;
    char strOpcion[maxCaracteres];

    while(strcmp(valor, "si") == 0)
    {

        operador = -1;
        printf("Insertar operacion a realizar:\n");

        menuOpcionesFuncionesMisiones();
        gets(strOpcion);


        while(operador < 0)
        {
            operador = validacionNumeros(strOpcion,minimaCantidadOpciones,6);

            if (operador > minimaCantidadOpciones && operador <= 6)
            {
                break;
            }
        }


        switch(operador)
        {

        case 1:
            cargarNuevaMision(&misio);
            break;

        case 2:
            buscarMisionPorId();
            break;

        case 3:
            cambiarEstadoMision();
            break;

        case 4:
            modificarMision();
            break;

        case 5:
            mostrarMisiones();
            break;

        case 6:
            consultarMisiones();
            break;
        }

        printf("\n Ingrese 'si', para hacer una nueva operacion con misiones\n Ingrese 'no', para dejar de operar con misiones \n");
        fflush(stdin);
        gets(valor);


        while (strcmp(valor, "si") != 0 && strcmp(valor, "no") != 0 )
        {
            printf("Ingrese una opcion valida: ");
            fflush(stdin);
            gets(valor);
        }
    }

}





int cargarNuevaMision(stMision * misio)
{

    FILE * archi = fopen(archiMision, "ab");


    misio->ID = ultimoIdMision();
    printf("%i", misio->ID);

    int idNave = cargarIdNaveMision(misio);

    if (idNave == 0)
    {
        return 0;

    }


    strcpy(misio->estado, "listo");
    cargarCargamentoMision(misio);
    cargarDestinoMision(misio);

    int idAstros = cargarTripulantesMision(misio);

    if (idAstros == 0)
    {
        return 0;
    }

    cargarDetalleMision(misio);

    mostrarDatosMision(misio);

    fwrite(misio, sizeof(stMision), 1, archi);



    cambiarEstadoNaveEnMision(misio->iDNave);

    cambiarHorasDeVueloNave (misio->destino, misio->iDNave );

    cambiarHorasDeVueloAstro(misio->destino, misio->tripulacion[0], misio->tripulacion[1], misio->tripulacion[2]);

    fclose(archi);
}

void cambiarHorasDeVueloAstro(char lugar[], int id, int id1, int id2){

    char ArrDestino[cantDestinos][maxCaracteres];
    menuDestino(ArrDestino);


    int posicion = buscarPosicionLugar(ArrDestino, lugar);

    cambiarVuelosHechosAstronauta(id);
    cambiarHorasAstronautas(posicion, id);
    cambiarVuelosHechosAstronauta(id1);
    cambiarHorasAstronautas(posicion, id1);
    cambiarVuelosHechosAstronauta(id2);
    cambiarHorasAstronautas(posicion, id2);


}


void cambiarHorasAstronautas(int posicion, int id){

    int horasViaje[100];
    menuHorasDeViaje(horasViaje);




    FILE * archi = fopen(archiAstronauta,"r+b");
    astronauta astro;

    int nuevaHora;


    while(fread(&astro, sizeof(astronauta), 1, archi)){


        if (astro.ID == id){

            nuevaHora = astro.horasVueloAcumuladas + horasViaje[posicion];

            astro.horasVueloAcumuladas = nuevaHora;

            fseek(archi, sizeof(astronauta) * -1, SEEK_CUR);
            fwrite(&astro, sizeof(astronauta),1,archi);
            break;

        }
        fclose(archi);
    }
}

void cambiarVuelosHechosAstronauta(int id){

astronauta astro;
int nuevoVuelo;

    FILE * archi = fopen(archiAstronauta,"r+b");

while(fread(&astro, sizeof(astronauta), 1, archi)){


        if (astro.ID == id){

            nuevoVuelo = astro.misionesEspacialesRealizadas + 1;

            astro.misionesEspacialesRealizadas = nuevoVuelo;

            fseek(archi, sizeof(astronauta) * -1, SEEK_CUR);
            fwrite(&astro, sizeof(astronauta),1,archi);
            break;

        }
    }


fclose(archi);

}

void menuDestino(char menuDestinoMision[][maxCaracteres])
{

    strcpy(menuDestinoMision[0], "Estacion Espacial Internacional");
    strcpy(menuDestinoMision[1], "Estratosfera");
    strcpy(menuDestinoMision[2], "Saturno");
    strcpy(menuDestinoMision[3], "Luna");
    strcpy(menuDestinoMision[4], "Marte");
    strcpy(menuDestinoMision[5], "El Inifinito y mas alla");


}

void menuHorasDeViaje(int horasDeViaje[])
{

     horasDeViaje[0] = 6;
     horasDeViaje[1] = 2;
     horasDeViaje[2] = 80;
     horasDeViaje[3] = 24;
     horasDeViaje[4] = 55;
     horasDeViaje[5] = 100;

}

int buscarPosicionLugar(char cargamentos[][maxCaracteres], char lugar[]){

    int i = 0;

    for (i = 0; i < cantCargamentos; i++){

        if (strcmp(cargamentos[i], lugar) == 0){

            return i;
        }
    }
return -1;
}




//-------------------------------------------------------------------
//-------------------------------------------------------------------
//-------------------------------------------------------------------






int cargarTripulantesMision(stMision * misio)
{


    int tripulantes[100];
    int i = 0 ;



    int validos = mostrarListaTripulantesActivos(tripulantes);



    if (validos < 3)
    {
        printf("No hay suficiente tripulacion como para hacer una mision");
        return 0;
    }


    while (i <= 2)
    {

        char strOpcion[maxCaracteres];
        int operador;
        printf("ID: ");
        fflush(stdin);
        gets(strOpcion);

        int maxIdAstronauta =  ultimoIdAstro() -1;

        operador = validacionNumeros(strOpcion, minIdAstro,maxIdAstronauta);

        if (operador >= minIdAstro && operador <= maxIdAstronauta)
        {
            int  valido = validarIdAstronautaMision(tripulantes, operador, validos);
            printf("\n\n%i \n\n",operador);

            if (valido == 1)
            {
                misio->tripulacion[i] = operador;
            }
            else
            {
                printf("ID no disponible\n");
            }
        }
        i++;
    }
    return 1;
}

int validarIdAstronautaMision(int tripulates[], int operador, int validos)
{

    int i;

    for(i = 0; i< validos; i++)
    {

        if (operador == tripulates[i])
        {
            return 1;
        }
    }

    return 0;
}

int mostrarListaTripulantesActivos(int tripulantes[])
{

    FILE * archi = fopen(archiAstronauta, "rb");
    astronauta astro;
    int i = 0;

    while(fread(&astro, sizeof(astronauta), 1, archi) > 0)
    {


        if (astro.estado ==  1)
        {

            int valido = confirmacion(astro.ID);

            if (valido == 1)
            {
                printf("- %i\n", astro.ID);
                tripulantes[i] = astro.ID;
                i++;

            }


        }
    }

    fclose(archi);
    return i;
}

int confirmacion(int dato)
{

    FILE * archi = fopen(archiMision, "rb");
    stMision misio;
    int i = 0;
    while (fread(&misio, sizeof(stMision), 1, archi)> 0)
    {


        for(i = 0; i <= 2; i++)
        {
            if ( misio.tripulacion[i] == dato)
            {
                fclose(archi);
                return 0;
            }
        }


    }
    fclose(archi);
    return 1;
}

int cargarIdNaveMision(stMision* misio)
{
    int valido = 0;
    int operador = -1;
    char strOpcion[maxCaracteres];
    int idDisponibles[100];
    int validos;

    int maxIdNave = ultimoIdNave() - 1;

    printf("\nIngrese el ID de la nave\n");
    validos = mostrarNavesDisponibles(idDisponibles);

    if (validos < 0)
    {
        return 0;
    }



    while (valido == 0)
    {
        printf("ID: ");
        fflush(stdin);
        gets(strOpcion);

        operador = validacionNumeros(strOpcion, minIdNave, maxIdNave);

        if (operador >= minIdNave && operador <= maxIdNave)
        {
            valido = validarIdNaveMision(idDisponibles, operador, validos);

            if (valido == 1)
            {
                break;
            }
            else
            {
                printf("ID no disponible\n");
            }
        }
    }


    misio->iDNave = operador;

}



void cambiarEstadoNaveEnMision(id)
{


    FILE * archi = fopen(archiNave, "r+b");
    nave nav;
    char estadoNuevo[maxCaracteres] = "Mision";

    while (fread(&nav, sizeof(nave), 1, archi) > 0)
    {

        if(nav.ID == id)
        {


            strcpy(nav.estado,estadoNuevo);

            fseek(archi, sizeof(nave) * -1, SEEK_CUR);
            fwrite(&nav, sizeof(nave),1,archi);

            break;
        }
    }

    fclose(archi);
}

void cambiarHorasDeVueloNave(int id, char lugar[]){

    char ArrDestino[cantDestinos][maxCaracteres];
    menuDestino(ArrDestino);


    int posicion = buscarPosicionLugar(ArrDestino, lugar);

    cambiarVuelosHechosNaveMision(id);
    cambiarHorasNaveMisio(posicion, id);


}

void cambiarVuelosHechosNaveMision(int id){

nave nav;
int nuevoVuelo;

    FILE * archi = fopen(archiNave,"r+b");

while(fread(&nav, sizeof(nave), 1, archi)){


        if (nav.ID == id){

            nuevoVuelo = nav.cantVuelosRealizados + 1;

            nav.cantVuelosRealizados = nuevoVuelo;

            fseek(archi, sizeof(nave) * -1, SEEK_CUR);
            fwrite(&nav, sizeof(nave),1,archi);
            break;

        }
    }


fclose(archi);

}


void cambiarHorasNaveMisio(int posicion, int id){

    int horasViaje[100];
    menuHorasDeViaje(horasViaje);




    FILE * archi = fopen(archiNave,"r+b");
    nave nav;

    int nuevaHora;


    while(fread(&nav, sizeof(nave), 1, archi)){


        if (nav.ID == id){

            nuevaHora = nav.horasAcumuladasVuelo + horasViaje[posicion];

            nav.horasAcumuladasVuelo = nuevaHora;

            fseek(archi, sizeof(nave) * -1, SEEK_CUR);
            fwrite(&nav, sizeof(nave),1,archi);

            break;

        }
    }

    fclose(archi);
}


void mostrarDatosMision(stMision misio)
{
    printf("\nID------------------------------- %i"    ,misio.ID);
    printf("\nID NAVE-------------------------- %i"    ,misio.iDNave);
    printf("\nESTADO--------------------------- %s"    ,misio.estado);
    printf("\nDESTINO-------------------------- %s"    ,misio.destino);
    printf("\nTRIPULACION------------ %i - %i - %i"    ,misio.tripulacion[0], misio.tripulacion[1],misio.tripulacion[2]);
    printf("\nCARGAMENTO----------------------- %s"    ,misio.cargamento);
    printf("\nDETALLE-------------------------- %s\n\n",misio.detalleMision);

}

void misionPredeterminada()
{

    FILE * archi = fopen(archiMision, "wb");

    stMision misio;

    misio.ID = 1;
    misio.iDNave = 1002;
    strcpy(misio.estado,"Listo");
    strcpy(misio.destino,"Saturno");
    strcpy(misio.cargamento,"Rober");
    misio.tripulacion[0] = 101;
    misio.tripulacion[1] = 102;
    misio.tripulacion[2] = 104;
    strcpy(misio.detalleMision,"El objetivo de la mision es poder descubrir nuevas tierras en otros planteas");


    fwrite(&misio, sizeof(stMision), 1, archi);

    fclose(archi);


}


int tamanoArchiMisio()
{
    FILE *fich =fopen(archiMision,"rb");

    fseek(fich, 0, SEEK_END);

    return ftell(fich)/sizeof(stMision);
    fclose(fich);
}

int ultimoIdMision()
{
    stMision aux;

    FILE *archi = fopen(archiMision,"rb");
    if(archi == NULL || tamanoArchiMisio() == 0)
    {
        fclose(archi);
        return 1;
    }

    fseek(archi,(sizeof(stMision) * -1),SEEK_END);
    fread(&aux,sizeof(stMision),1,archi);

    return aux.ID + 1;

}


int mostrarNavesDisponibles(int idDisponibles[])
{
    FILE* archi = fopen(archiNave, "rb");
    int i = 0;
    int veces = 0;
    nave nav;
    printf("Lista de naves disponibles\n");

    while (fread(&nav, sizeof(nave), 1, archi) > 0)
    {
        if (strcmp(nav.estado, "Lista para su uso") == 0)
        {
            printf("- %i\n", nav.ID);
            idDisponibles[i] = nav.ID;
            i++;
            veces++;
        }
    }

    if (veces == 0)
    {
        printf("\nNo hay naves disponibles en este momento");
        fclose(archi);
        return -1;
    }

    fclose(archi);
    return i;
}
int validarIdNaveMision(int idDisponibles[], int operador, int validos)
{

    int i = 0;

    for(i = 0; i< validos; i++)
    {
        if (operador == idDisponibles[i])
        {
            return 1;
        }
    }

    return 0;
}

void menuCargamento(char menuCargamentoMision[][maxCaracteres])
{

    strcpy(menuCargamentoMision[0], "Satelite");
    strcpy(menuCargamentoMision[1], "Recursos");
    strcpy(menuCargamentoMision[2], "Rober");
    strcpy(menuCargamentoMision[3], "Colectivo");
    strcpy(menuCargamentoMision[4], "StarLink");
    strcpy(menuCargamentoMision[5], "'Clasificado'");


}


void cargarCargamentoMision(stMision * misio)
{


    int operador = -1;
    char strOpcion[maxCaracteres];

    char cargamentos[cantCargamentos][maxCaracteres];
    menuCargamento(cargamentos);


    printf("Seleccione un numero asociado a un cargamento\n");
    mostrarMenuCargamento(cargamentos);

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantCargamentos);

        if (operador >= minimaCantidadOpciones && operador <= cantCargamentos)
        {
            strcpy(misio->cargamento,cargamentos[operador - 1]);

            break;
        }
    }


}



void mostrarMenuCargamento(char menuCargamentoMision[][maxCaracteres])
{

    int  i= 0;
    int pos = 1;

    for (i = 0; i< cantCargamentos; i++)
    {

        printf("\n|%i| %s", pos, menuCargamentoMision[i]);
        pos++;
    }
    printf("\n");

}



void cargarDestinoMision(stMision * misio)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char destino[cantDestinos][maxCaracteres];
    menuDestino(destino);


    printf("Seleccione un numero asociado a un destino\n");
    mostrarMenuDestino(destino);
    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantDestinos);

        if (operador >= minimaCantidadOpciones && operador <= cantDestinos)
        {
            strcpy(misio->destino,destino[operador - 1]);
            break;
        }
    }

}




void mostrarMenuDestino(char menuDestinoMision[][maxCaracteres])
{

    int  i;
    int j = 1;
    for (i = 0; i < cantDestinos; i++)
    {

        printf("\n|%i| %s", j, menuDestinoMision[i]);
        j++;
    }
    printf("\n");

}


void cargarDetalleMision(stMision * misio)
{

    char detalle[detalleDeMision];

    printf("Ingrese el detalle de la mision: ");

    fgets(detalle, detalleDeMision,stdin);

    strcpy(misio->detalleMision, detalle);

}


void mostrarArchivoMisiones()
{



    stMision misio;
    FILE*archi = fopen(archiMision, "rb");

    while(fread(&misio, sizeof(stMision),1, archi) > 0)
    {

        printf("\n");
        mostrarDatosMision(misio);
    }




    fclose(archi);
}


//--------------------BUSCAR POR ID----------------------

void buscarMisionPorId()
{
    menuIDMision();
    int id = idBuscadoMision();


    FILE* archi = fopen(archiMision, "rb");

    stMision misio;

    while(fread(&misio, sizeof(stMision), 1, archi) > 0)
    {
        if(misio.ID== id)
        {

            mostrarDatosMision(misio);
            break;
        }
    }
    fclose(archi);
}


int idBuscadoMision()
{

    int valido = 0;
    int operador = -1;
    char strOpcion[maxCaracteres];
    int maxIdMision =  ultimoIdMision() -1;

    valido = validacionIDNave(operador);


    while (valido == 0 && (operador < minIdMision || operador > maxIdMision))
    {

        printf("Inserte el ID de la nave: ");
        fflush(stdin);
        gets(strOpcion);

        operador = validacionNumeros(strOpcion,minIdMision,maxIdMision);

        valido = validacionIDAstro(operador);

        if (operador >= minIdMision && operador <= maxIdMision && valido == 1)
        {

            return operador;

        }
    }

}


void menuIDMision()
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n|1|  Para ver menu de id \n|2|  Para seguir\n");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadMenu);

        if (operador > minimaCantidadOpciones && operador < maxCantidadMenu)
        {
            break;
        }
    }


    if (operador == 1)
    {
        printf("\n");

        mostrarListaIDMision();

        printf("\n");
    }

    else if (operador == 2)
    {
        return;

    }


}


void mostrarListaIDMision()
{
    FILE* archi = fopen(archiMision, "rb");
    stMision misio;

    while (fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        printf("ID: %i\n", misio.ID);
    }

    fclose(archi);
}


//-------------------------------CONSULTAS MISIONES------------------------------------





void menuConsultasMision()
{


    printf("\n|1| = Buscar Mision por ID \n");
    printf(  "|2| = Buscar Mision por estado\n");
    printf(  "|3| = Buscar Mision por cargamento\n");
    printf(  "|4| = Buscar Mision por destino\n");
    printf(  "|5| = Buscar Mision por tipo de nave\n");

}


void consultarMisiones()
{


    int operador = -1;
    char strOpcion[maxCaracteres];


    printf("Seleccione el aspecto que desea consultar de la Mision: ");
    menuConsultasMision();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadModificacionesMision);

        if (operador > minimaCantidadOpciones && operador < maxCantidadModificacionesMision)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        buscarMisionPorId();
        break;

    case 2:
        buscarMisionPorEstado();
        break;

    case 3:
        buscarMisionPorCargamento();
        break;

    case 4:
        buscarMisionPorDestino();
        break;

    case 5:
        buscarMisionPorTipoNave();
        break;


    default:
        printf("El numero ingresado no corresponde con las opciones");
        break;
    }
}



void buscarMisionPorCargamento()
{

    FILE * archi = fopen(archiMision, "rb");

    stMision misio;
    stMision aux;
    int veces = 0;

    cargarCargamentoMision(&aux);

    while(fread(&misio, sizeof(stMision), 1, archi) > 0)
    {



        if (strcmp(misio.cargamento, aux.cargamento) == 0)
        {


            mostrarDatosMision(misio);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna mision que cumpla con ese requisito\n");
    }


    fclose(archi);

}

void buscarMisionPorDestino()
{

    FILE * archi = fopen(archiMision, "rb");

    stMision misio;
    stMision aux;
    int veces = 0;

    cargarDestinoMision(&aux);

    while(fread(&misio, sizeof(stMision), 1, archi) > 0)
    {



        if (strcmp(misio.destino, aux.destino) == 0)
        {

            mostrarDatosMision(misio);
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna mision que cumpla con ese requisito\n");
    }


    fclose(archi);

}



int buscarMisionPorTipoAux(int iguales[])
{

    nave nav;
    nave aux;

    int veces = 0;


    cargarTipoNave(&aux);

    FILE * archi = fopen(archiNave, "rb");

    while (fread(&nav, sizeof(nave), 1, archi) >0)
    {

        if (strcmp(nav.tipoNave, aux.tipoNave) == 0)
        {

            iguales[veces] = nav.ID;
            veces++;
        }
    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna nave que cumpla con ese requisito\n");
    }

    fclose(archi);

    return veces;
}


void buscarMisionPorTipoNave()
{
    int iguales[maxCantidadHoras];
    int valis = buscarMisionPorTipoAux(iguales);
    int i = 0;
    stMision misio;
    int oper = 0;

    FILE * archi = fopen(archiMision, "rb");



    while (fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        while(i < valis){

        if(iguales[i] == misio.iDNave){

            mostrarDatosMision(misio);
            oper++;
        }
        i++;
        }
        i = 0;
    }
    if(oper == 0){
        printf("No hay misiones asociadas a naves de ese tipo.");
    }

    fclose(archi);
}

void tiposEstadoMision(char estadosMision[cantEstadosMision][maxCaracteres])
{
    printf("\n");
    strcpy(estadosMision[0], "Listo");
    strcpy(estadosMision[1], "En vuelo");
    strcpy(estadosMision[2], "Retornada");
    strcpy(estadosMision[3], "Cancelada");
    strcpy(estadosMision[4], "Fallida");
}

void mostrarEstadosMision(char estadosMision[cantEstadosMision][maxCaracteres])
{

    int i = 0;
    int pos = 1;

    while (i < cantEstadosMision)
    {


        printf("|%i| %s \n",pos, estadosMision[i]);

        pos++;
        i++;
    }
}


void  cargarEstadoMision(stMision* misio)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estadosMision[cantEstadosMision][maxCaracteres];
    tiposEstadoMision(estadosMision);


    printf("Seleccione un numero asociado a un estado\n");
    mostrarEstadosMision(estadosMision);

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantEstados);

        if (operador >= minimaCantidadOpciones && operador <= cantEstadosMision)
        {
            strcpy(misio->estado,estadosMision[operador - 1]);
            break;
        }
    }
}



void buscarMisionPorEstado()
{

    stMision misio;
    stMision aux;
    int veces = 0;


    cargarEstadoMision(&aux);

    FILE * archi = fopen(archiMision, "rb");

    while(fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        if (strcmp(misio.estado, aux.estado) == 0)
        {
            mostrarDatosMision(misio);
            veces++;
        }

    }
    if (veces == 0)
    {
        printf("\nNo hay ninguna mision que cumpla con ese requisito\n");
    }

}




void mostrarMisiones()
{


    int operador = -1;
    char strOpcion[maxCaracteres];

    mostrarListaOpcionesMostrarMisiones();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,cantOpcionesMostrarMisiones);

        if (operador > minimaCantidadOpciones && operador < cantOpcionesMostrarMisiones)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        mostrarArchivoMisiones();
        break;
    case 2:
        buscarMisionPorEstado();
        break;
    case 3:
        buscarMisionPorCargamento();
        break;
    case 4:
        buscarMisionPorDestino();
        break;
    }
}




void mostrarListaOpcionesMostrarMisiones()
{
    printf("\n Seleccione la opcion que desee\n");
    printf("|1| Mostrar todas las misiones\n");
    printf("|2| Mostrar misiones por estado\n");
    printf("|3| Mostrar misiones por cargamento\n");
    printf("|4| Mostrar mostrar misiones por destino\n");
}



void modificarMision()
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    FILE * archi = fopen(archiMision, "r+b");

    printf("Seleccione el aspecto que desea modificar de la mision: ");
    menuModificacionesMision();

    gets(strOpcion);

    while(operador < 0)
    {
        operador = -1;
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,maxCantidadModificacionesNave);

        if (operador > minimaCantidadOpciones && operador < maxCantidadModificacionesNave)
        {
            break;
        }
    }



    switch(operador)
    {

    case 1:
        cambiarDestinoMision();
        break;

    case 2:
        cambiarCargamentoMision();
        break;

    case 3:
        cambiarDetalleMision();
        break;


    default:
        printf("El numero ingresado no corresponde con las opciones");
        break;
    }

    fclose(archi);
}


void menuModificacionesMision()
{


    printf("\n|1| = Modificar Destino\n");
    printf(  "|2| = Modificar Cargamento\n");
    printf(  "|3| = Modificar Detalle\n");

}


void cambiarDestinoMision()
{
    menuIDMision();
    int id = idBuscadoMision();
    stMision misio;

    FILE * archi = fopen(archiMision, "r+b");

    while (fread(&misio, sizeof(stMision),1, archi))
    {

        if(misio.ID == id)
        {

            fseek(archi,sizeof(stMision) * -1, SEEK_CUR);

            cargarDestinoMision(&misio);

            fwrite(&misio, sizeof(stMision),1, archi);

            mostrarDatosMision(misio);
            break;
        }
    }

    fclose(archi);
}

void cambiarCargamentoMision()
{
    menuIDMision();
    int id = idBuscadoMision();
    stMision misio;

    FILE * archi = fopen(archiMision, "r+b");

    while (fread(&misio, sizeof(stMision),1, archi))
    {

        if(misio.ID == id)
        {

            fseek(archi,sizeof(stMision) * -1, SEEK_CUR);

            cargarCargamentoMision(&misio);

            fwrite(&misio, sizeof(stMision),1, archi);

            mostrarDatosMision(misio);
            break;
        }
    }

    fclose(archi);
}


void cambiarDetalleMision()
{
    menuIDMision();
    int id = idBuscadoMision();
    stMision misio;

    FILE * archi = fopen(archiMision, "r+b");

    while (fread(&misio, sizeof(stMision),1, archi))
    {

        if(misio.ID == id)
        {

            fseek(archi,sizeof(stMision) * -1, SEEK_CUR);

            cargarDetalleMision(&misio);

            fwrite(&misio, sizeof(stMision),1, archi);

            mostrarDatosMision(misio);
            break;
        }
    }

    fclose(archi);
}


void cambiarEstadoMision(){

stMision misio;

stMision aux;

printf("\nSeleccione el estado actual de la nave que desea modificar\n");
cargarEstadoModificacionMision(&aux);


if (strcmp(aux.estado,"Listo" ) == 0){
   int  id = elegirMisionLista();
   printf("\n");
    if (id > 0){

            cambiarEstadoDesdeListo(id);
    }


}
else if (strcmp(aux.estado,"En vuelo" ) == 0){
    int id = elegirMisionEnMision();
    printf("\n");
    if (id  > 0){

            cambiarEstadoDesdeEnVuelo(id);
    }

}

}

void  cargarEstadoModificacionMision(stMision* misio)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estadosMision[2][maxCaracteres];
    tiposEstadoMisionModificacion(estadosMision);


    printf("Seleccione un numero asociado a un estado\n");
    mostrarDosEstados(estadosMision);

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,2);


        if (operador >= minimaCantidadOpciones && operador <= 2)
        {
            strcpy(misio->estado,estadosMision[operador - 1]);

            break;
        }
    }


}




void cambiarEstadoDesdeListo(int id) {
    stMision aux;
    stMision misio;

    printf("\nSeleccione el estado que quiera\n");
    cargarEstadoModificacionMisionListo(&aux);


    FILE* archi = fopen(archiMision, "r+b");


    while (fread(&misio, sizeof(stMision), 1, archi) > 0) {
        if (misio.ID == id) {

            fseek(archi, sizeof(stMision) * -1, SEEK_CUR);
            strcpy(misio.estado, aux.estado);

            fwrite(&misio, sizeof(stMision), 1, archi);
            mostrarDatosMision(misio);


            break;
        }
    }

    fclose(archi);
}



void  cargarEstadoModificacionMisionListo(stMision* misio)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estadosMision[2][maxCaracteres];
    tiposEstadoMisionModificacionListo(estadosMision);

    printf("Seleccione un numero asociado a un estado\n");
    mostrarDosEstados(estadosMision);
    fflush(stdin);
    gets(strOpcion);

    char nuevaOpcion[maxCaracteres];


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,2);
            strcpy(nuevaOpcion, estadosMision[operador]);

        if (operador == 1)
        {
            strcpy(misio->estado,estadosMision[0]);

            break;
        }
        if (operador == 2)
        {
            strcpy(misio->estado,estadosMision[1]);

        }
    }


}

void tiposEstadoMisionModificacion(char estadosMision[cantEstadosMision][maxCaracteres]){

    printf("\n");
    strcpy(estadosMision[0], "Listo");
    strcpy(estadosMision[1], "En vuelo");


}



int elegirMisionLista(){


stMision misio;
stMision aux;

int operador = -1;
char strOpcion[maxCaracteres];
int valido;
printf("\nSeleccione la mision que desea modificar el estado\n");
valido = mostrarMisionesListas();
if (valido < 0){
    return -1;
}

int maxIdMisio = ultimoIdMision() - 1;

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minIdMision,maxIdMisio);

        if (operador >= minIdMision && operador <= maxIdMisio)
        {

            return operador;
        }
    }




}


int mostrarMisionesListas(){

FILE * archi = fopen(archiMision, "rb");
stMision misio;
int veces = 0;
while (fread(&misio, sizeof(stMision), 1, archi) > 0){

printf("Lista de Misiones Listas\n");
    if( strcmp(misio.estado, "Listo") == 0){

        printf("\n- %i", misio.ID);
        veces++;
    }

}
if (veces == 0){
    printf("Actualmente no hay misiones Listas \n");
    return -1;
}
 printf("\n");
fclose(archi);
}

void tiposEstadoMisionModificacionListo(char estadosMision[2][maxCaracteres]){

    printf("\n");
    strcpy(estadosMision[0], "Cancelada");
    strcpy(estadosMision[1], "En vuelo");

}


void mostrarDosEstados(char estadosMision[][maxCaracteres]){

int i = 0;
    int pos = 1;

    while (i < 2)
    {

        printf("|%i| %s \n",pos, estadosMision[i]);

        pos++;
        i++;
    }
}


void cambiarEstadoAEnVuelo(int id){

stMision misio;
FILE * archi = fopen(archiMision, "r+b");


    char estadoNuevo[maxCaracteres] = "En vuelo";

    while (fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        if(misio.ID == id)
        {

            strcpy(misio.estado,estadoNuevo);

            fseek(archi, sizeof(stMision) * -1, SEEK_CUR);
            fwrite(&misio, sizeof(stMision),1,archi);

            break;
        }
    }

    fclose(archi);


}



void cambiarEstadoACanselada(int id){

stMision misio;
FILE * archi = fopen(archiMision, "r+b");


    char estadoNuevo[maxCaracteres] = "Cancelada";

    while (fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        if(misio.ID == id)
        {

            strcpy(misio.estado,estadoNuevo);

            fseek(archi, sizeof(stMision) * -1, SEEK_CUR);
            fwrite(&misio, sizeof(stMision),1,archi);

            break;
        }
    }

    fclose(archi);


}






void cambiarEstadoDesdeEnVuelo(int id) {

    stMision aux;
    stMision misio;


    if (id == 0){
        return 0;
    }
    printf("\nSeleccione el estado que quiera\n");
    cargarEstadoModificacionMisionEnMision(&aux);


    FILE* archi = fopen(archiMision, "r+b");


    while (fread(&misio, sizeof(stMision), 1, archi) > 0) {
        if (misio.ID == id) {

            fseek(archi, sizeof(stMision) * -1, SEEK_CUR);
            strcpy(misio.estado, aux.estado);

            fwrite(&misio, sizeof(stMision), 1, archi);
            mostrarDatosMision(misio);


            break;
        }
    }

    fclose(archi);
}

int elegirMisionEnMision(){


stMision misio;
stMision aux;

int operador = -1;
char strOpcion[maxCaracteres];

printf("\nSeleccione la mision que desea modificar el estado\n");
int valido = mostrarMisionesEnVuelo();
if (valido < 0){
    return -1;
}
int maxIdMisio = ultimoIdMision() - 1;

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minIdMision,maxIdMisio);

        if (operador >= minIdMision && operador <= maxIdMisio)
        {

            return operador;
        }
    }




}


int mostrarMisionesEnVuelo(){

FILE * archi = fopen(archiMision, "rb");
stMision misio;
int veces = 0;
while (fread(&misio, sizeof(stMision), 1, archi) > 0){

printf("Lista de Misiones En Vuelo\n");
    if( strcmp(misio.estado, "En vuelo") == 0){

        printf("\n- %i", misio.ID);
        veces++;
    }

}
if (veces == 0){
    printf("Actualmente no hay misiones en vuelo \n");
    return -1;
}
 printf("\n");
fclose(archi);
}


void  cargarEstadoModificacionMisionEnMision(stMision* misio)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estadosMision[2][maxCaracteres];
    tiposEstadoMisionModificacionEnVuelo(estadosMision);

    printf("Seleccione un numero asociado a un estado\n");
    mostrarDosEstados(estadosMision);
    fflush(stdin);
    gets(strOpcion);

    char nuevaOpcion[maxCaracteres];


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minimaCantidadOpciones,2);
            strcpy(nuevaOpcion, estadosMision[operador]);

        if (operador == 1)
        {
            strcpy(misio->estado,estadosMision[0]);

            break;
        }
        if (operador == 2)
        {
            strcpy(misio->estado,estadosMision[1]);

        }
    }


}

void tiposEstadoMisionModificacionEnVuelo(char estadosMision[2][maxCaracteres]){

    printf("\n");
    strcpy(estadosMision[0], "Fallida");
    strcpy(estadosMision[1], "Retornada");

}

void cambiarEstadoARetornada(int id){

stMision misio;
FILE * archi = fopen(archiMision, "r+b");


    char estadoNuevo[maxCaracteres] = "Retornada";

    while (fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        if(misio.ID == id)
        {

            strcpy(misio.estado,estadoNuevo);

            fseek(archi, sizeof(stMision) * -1, SEEK_CUR);
            fwrite(&misio, sizeof(stMision),1,archi);

            break;
        }
    }

    fclose(archi);


}

void cambiarEstadoAFallida(int id){

stMision misio;
FILE * archi = fopen(archiMision, "r+b");


    char estadoNuevo[maxCaracteres] = "Fallida";

    while (fread(&misio, sizeof(stMision), 1, archi) > 0)
    {

        if(misio.ID == id)
        {

            strcpy(misio.estado,estadoNuevo);

            fseek(archi, sizeof(stMision) * -1, SEEK_CUR);
            fwrite(&misio, sizeof(stMision),1,archi);

            break;
        }
    }

    fclose(archi);


}




