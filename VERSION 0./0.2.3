#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define maxCaracteres 100
#define cantNacionalidades 213
#define cantEspecialidades 5


//----------------------------------ESTRUCTURAS------------------------------------------------------------------------

typedef struct
{

    int ID;
    char nombre[maxCaracteres];
    char apellido[maxCaracteres];
    char apodo[maxCaracteres];
    int edad;
    char nacionalidad[maxCaracteres];
    char especialidad[maxCaracteres];
    int horasVueloAcumuladas;
    int misionesEspacialesRealizadas;
    int horasAcumuladasEEI;
    int estado;
} astronauta;


//---------------------------------FUNCIONES---------------------------------------------------------------------------

void cargarNombre(astronauta* astro);


//CARGAR ITEMS
void cargarAstronautaNuevo(astronauta* astro);

void cargarApellido(astronauta* astro);

void cargarApodo(astronauta* astro);

void cargarNacionalidad(astronauta* astro);

void cargarEdad(astronauta* astro);

void cargarEspecialidad(astronauta* astro);

//MOSTRAR COSAS

void mostrarDatosAstronauta(astronauta astronauta);

void mostrarCatalogoNacionalidades(char nacionalidades[66][maxCaracteres]);

void mostrarEspecialidades(char especialidades[][maxCaracteres]);


void baseNacionalidades(char nacionalidades[cantNacionalidades][maxCaracteres]);

void especialidadesAstronauta(char especialidades[][maxCaracteres]);

//VALIDACIONES

int  validacionEdad(int edad);

int  validacionString(char string[maxCaracteres]);

int validacionEspecialidad (int seleccion);

int validacionNacionalidad(char nacionalidad[maxCaracteres], char nacionalidades[cantNacionalidades][maxCaracteres]);


//---------------------------------MAIN--------------------------------------------------------------------------------

int main()
{
    astronauta astro;
    cargarAstronautaNuevo(&astro);
    mostrarDatosAstronauta(astro);

}

//---------------------------------------------------------------------------------------------------------------------



//FUNCION PRINCIPAL PARA CARGAR EL ASTRONAUTA--------------------------------------------------------------------------

void cargarAstronautaNuevo(astronauta* astro)
{

    cargarNombre(astro);
    cargarApellido(astro);
    cargarApodo(astro);
    cargarEdad(astro);
    cargarNacionalidad(astro);
    cargarEspecialidad(astro);
}
//---------------------------------------------------------------------------------------------------------------------



//FUNCION QUE CARGA Y VALIDA EL NOMBRE---------------------------------------------------------------------------------

void cargarNombre(astronauta* astro)
{
    char nombre[maxCaracteres];
    printf("\nNombre: ");

    fflush(stdin);

    gets(nombre);

    int valido = validacionString(nombre);


    if(valido == 1)
    {

        strcpy(astro->nombre, nombre);
    }
    else if(valido == 0)
    {

        while (valido == 0)
        {

            printf("Ingrese un nombre valido\nNombre: ");
            fflush(stdin);
            gets(nombre);

            valido = validacionString(nombre);

        }
    }

    strcpy(astro->nombre, nombre);
}
//---------------------------------------------------------------------------------------------------------------------

//VALIDA QUE EL STRING INGRESADO NO TENGA NUMEROS Y SEA UNICAMENTE LETRAS----------------------------------------------
int validacionString(char string[maxCaracteres])
{

    int cantidadCaracteres = strlen(string);
    int i;

    for (i = 0; i < cantidadCaracteres; i++)
    {
        char caracter = string[i];

        if (isalpha(caracter) == 0)
        {
            return 0;
        }
    }

    return 1;
}
//---------------------------------------------------------------------------------------------------------------------

//CARGA Y VALIDA EL APELLIDO-------------------------------------------------------------------------------------------
void cargarApellido(astronauta* astro)
{


    char apellido[maxCaracteres];

    printf("\nApellido: ");

    fflush(stdin);

    gets(apellido);

    int valido = validacionString(apellido);

    if(valido == 1)
    {

        strcpy(astro->apellido, apellido);

    }
    else if (valido == 0)
    {

        while (valido == 0)
        {


            printf("Inserte un apellido valido\nApellido: ");
            fflush(stdin);
            gets(apellido);

            valido = validacionString(apellido);
        }
    }

    strcpy(astro->apellido,apellido);
}
//---------------------------------------------------------------------------------------------------------------------

//CARGA Y VALIDA EL APODO----------------------------------------------------------------------------------------------
void cargarApodo(astronauta* astro)
{

    char apodo[maxCaracteres];

    printf("\nApodo: ");

    fflush(stdin);

    gets(apodo);

    int valido = validacionString(apodo);

    if(valido == 1)
    {

        strcpy(astro->apodo, apodo);

    }

    else if(valido == 0)
    {

        while(valido == 0)
        {

            printf("Ingrese un apodo valido\nApodo: ");
            fflush(stdin);
            gets(apodo);

            valido = validacionString(apodo);

        }


    }

    strcpy(astro->apodo, apodo);
}
//---------------------------------------------------------------------------------------------------------------------

//MUESTRA DATOS DEL ASTRONAUTA (FALTA COMPLETAR)-----------------------------------------------------------------------
void mostrarDatosAstronauta(astronauta astro)
{

    printf("\nNOMBRE: %s", astro.nombre);
    printf("\nAPELLIDO: %s", astro.apellido);
    printf("\nAPODO: %s", astro.apodo);
    printf("\nEDAD: %i", astro.edad);
    printf("\nNACIONALIDAD: %s", astro.nacionalidad);
    printf("\nESPECIALIDAD: %s", astro.especialidad);

    printf("\n");

}
//---------------------------------------------------------------------------------------------------------------------


//CARGA Y VALIDA LA NACIONALIDAD POR MEDIO DE UN MENU------------------------------------------------------------------
void cargarNacionalidad(astronauta* astro)
{
    int catalogo;
    int valido;
    char nacionalidades[cantNacionalidades][maxCaracteres];

    baseNacionalidades(nacionalidades);

    char nacionalidad[maxCaracteres];

    printf("NACIONALIDAD: ");
    fflush(stdin);
    gets(nacionalidad);

    valido = validacionNacionalidad(nacionalidad, nacionalidades);

    if(valido == 1)
    {

        strcpy(astro->nacionalidad, nacionalidad);
    }
    else if(valido == 0)
    {

        while(valido == 0)
        {

            printf("Cargar una nacionalidad existente:\n");
            printf("Si quiere ver el listado de nacionalidades ordenado alfabeticamente inserte 1\nInserte 0 para cargar la nacionalidad correcta:  ");
            scanf("%i", &catalogo);

            if(catalogo == 1)
            {

                mostrarCatalogoNacionalidades(nacionalidades);
            }

            printf("NACIONALIDAD\n");
            fflush(stdin);
            gets(nacionalidad);


            valido = validacionNacionalidad(nacionalidad, nacionalidades);
        }
    }

    strcpy(astro->nacionalidad, nacionalidad);
}
//---------------------------------------------------------------------------------------------------------------------

//VALIDA QUE LA NACIONALIDAD INSERTADA SEA VALIDA CON RESPECTO A LOS PAISES ACTUALES DEL MUNDO-------------------------
int validacionNacionalidad(char nacionalidad[maxCaracteres], char nacionalidades[cantNacionalidades][maxCaracteres])
{

    int i;
    int valido;

    for(i = 0; i < cantNacionalidades; i++)
    {

        if(strcmp(nacionalidad, nacionalidades[i]) == 0)
        {
            return 1;
        }

    }

    return 0;
}
//---------------------------------------------------------------------------------------------------------------------



//CARGA EN LA MATRIZ INGRESADA TODOS LOS PAISES VALIDOS ACTUALMENTE----------------------------------------------------
void baseNacionalidades(char nacionalidades[cantNacionalidades][maxCaracteres])
{
    //15 A-------------------------------


    strcpy(nacionalidades[0],"Afganistan");
    strcpy(nacionalidades[1],"Albania");
    strcpy(nacionalidades[2],"Alemania");
    strcpy(nacionalidades[3],"Andorra");
    strcpy(nacionalidades[4],"Angola");
    strcpy(nacionalidades[5],"Antigua y Barbuda");
    strcpy(nacionalidades[6],"Antillas Holandesas");
    strcpy(nacionalidades[7],"Arabia Saudi");
    strcpy(nacionalidades[8],"Argelia");
    strcpy(nacionalidades[9],"Argentina");
    strcpy(nacionalidades[10],"Armenia");
    strcpy(nacionalidades[11],"Aruba");
    strcpy(nacionalidades[12],"Australia");
    strcpy(nacionalidades[13],"Austria");
    strcpy(nacionalidades[14],"Azerbaiyan");

    // 18 B------------------------------


    strcpy(nacionalidades[15],"Bahamas");
    strcpy(nacionalidades[16],"Bahrein");
    strcpy(nacionalidades[17],"Bangladesh");
    strcpy(nacionalidades[18],"Barbados");
    strcpy(nacionalidades[19],"Belgica");
    strcpy(nacionalidades[20],"Belice");
    strcpy(nacionalidades[21],"Benin");
    strcpy(nacionalidades[22],"Bermudas");
    strcpy(nacionalidades[23],"Bielorrusia");
    strcpy(nacionalidades[24],"Bolivia");
    strcpy(nacionalidades[25],"Botsuana");
    strcpy(nacionalidades[26],"Bosnia");
    strcpy(nacionalidades[27],"Brasil");
    strcpy(nacionalidades[28],"Brunei");
    strcpy(nacionalidades[29],"Bulgaria");
    strcpy(nacionalidades[30],"Burkina Faso");
    strcpy(nacionalidades[31],"Burundi");
    strcpy(nacionalidades[32],"Butan");



    //17 C-------------------------------


    strcpy(nacionalidades[33],"Cabo Verde");
    strcpy(nacionalidades[34],"Camboya");
    strcpy(nacionalidades[35],"Camerun");
    strcpy(nacionalidades[36],"Canada");
    strcpy(nacionalidades[37],"Catar");
    strcpy(nacionalidades[38],"Chad");
    strcpy(nacionalidades[39],"Chile");
    strcpy(nacionalidades[40],"Chipre");
    strcpy(nacionalidades[41],"Colombia");
    strcpy(nacionalidades[42],"Comoras");
    strcpy(nacionalidades[43],"Congo");
    strcpy(nacionalidades[44],"Corea del Norte");
    strcpy(nacionalidades[45],"Corea del Sur");
    strcpy(nacionalidades[46],"Costa de Marfil");
    strcpy(nacionalidades[47],"Costa Rica");
    strcpy(nacionalidades[48],"Croacia");
    strcpy(nacionalidades[49],"Cuba");



    //2 D--------------------------------


    strcpy(nacionalidades[50],"Dinamarca");
    strcpy(nacionalidades[51],"Dominica");

    //11 E-------------------------------

    strcpy(nacionalidades[52],"Ecuador");
    strcpy(nacionalidades[53],"Egipto");
    strcpy(nacionalidades[54],"El Salvador");
    strcpy(nacionalidades[55],"Emiratos Arabes");
    strcpy(nacionalidades[56],"Eritrea");
    strcpy(nacionalidades[57],"Eslovaquia");
    strcpy(nacionalidades[58],"Eslovenia");
    strcpy(nacionalidades[59],"España");
    strcpy(nacionalidades[60],"Estados Unidos");
    strcpy(nacionalidades[61],"Estonia");
    strcpy(nacionalidades[62],"Etiopia");

    //4 F--------------------------------

    strcpy(nacionalidades[63],"Fiyi");
    strcpy(nacionalidades[64],"Filipinas");
    strcpy(nacionalidades[65],"Finlandia");
    strcpy(nacionalidades[66],"Francia");


    //13 G-------------------------------

    strcpy(nacionalidades[67],"Gabon");
    strcpy(nacionalidades[68],"Gambia");
    strcpy(nacionalidades[69],"Georgia");
    strcpy(nacionalidades[70],"Ghana");
    strcpy(nacionalidades[71],"Grecia");
    strcpy(nacionalidades[72],"Guam");
    strcpy(nacionalidades[73],"Guatemala");
    strcpy(nacionalidades[74],"Guayana Francesa");
    strcpy(nacionalidades[75],"Guinea-Bissau");
    strcpy(nacionalidades[76],"Guinea Ecuatorial");
    strcpy(nacionalidades[77],"Guinea");
    strcpy(nacionalidades[78],"Guyana");
    strcpy(nacionalidades[79],"Granada");

    //5 H--------------------------------

    strcpy(nacionalidades[80],"Haiti");
    strcpy(nacionalidades[81],"Honduras");
    strcpy(nacionalidades[82],"Hong Kong");
    strcpy(nacionalidades[83],"Hungria");
    strcpy(nacionalidades[84],"Holanda");

    //12 I-------------------------------

    strcpy(nacionalidades[85],"India");
    strcpy(nacionalidades[86],"Indonesia");
    strcpy(nacionalidades[87],"Irak");
    strcpy(nacionalidades[88],"Iran");
    strcpy(nacionalidades[89],"Irlanda");
    strcpy(nacionalidades[90],"Islandia");
    strcpy(nacionalidades[91],"Islas Caiman");
    strcpy(nacionalidades[92],"Islas Marshall");
    strcpy(nacionalidades[93],"Islas Pitcairn");
    strcpy(nacionalidades[94],"Islas Salomon");
    strcpy(nacionalidades[95],"Israel");
    strcpy(nacionalidades[96],"Italia");

    //3 J--------------------------------

    strcpy(nacionalidades[97],"Jamaica");
    strcpy(nacionalidades[98],"Japon");
    strcpy(nacionalidades[99],"Jordania");

    //6 K--------------------------------

    strcpy(nacionalidades[100],"Kazajstan");
    strcpy(nacionalidades[101],"Kenia");
    strcpy(nacionalidades[102],"Kirguistan");
    strcpy(nacionalidades[103],"Kiribati");
    strcpy(nacionalidades[104],"Kosovo");
    strcpy(nacionalidades[105],"Kuwait");

    //9 L--------------------------------

    strcpy(nacionalidades[106],"Laos");
    strcpy(nacionalidades[107],"Lesotho");
    strcpy(nacionalidades[108],"Letonia");
    strcpy(nacionalidades[109],"Libano");
    strcpy(nacionalidades[110],"Liberia");
    strcpy(nacionalidades[111],"Libia");
    strcpy(nacionalidades[112],"Liechtenstein");
    strcpy(nacionalidades[113],"Lituania");
    strcpy(nacionalidades[114],"Luxemburgo");

    //19 M-------------------------------

    strcpy(nacionalidades[115],"Macedonia");
    strcpy(nacionalidades[116],"Madagascar");
    strcpy(nacionalidades[117],"Malasia");
    strcpy(nacionalidades[118],"Malawi");
    strcpy(nacionalidades[119],"Maldivas");
    strcpy(nacionalidades[120],"Mali");
    strcpy(nacionalidades[121],"Malta");
    strcpy(nacionalidades[122],"Marianas del Norte");
    strcpy(nacionalidades[123],"Marruecos");
    strcpy(nacionalidades[124],"Mauricio");
    strcpy(nacionalidades[125],"Mauritania");
    strcpy(nacionalidades[126],"Mexico");
    strcpy(nacionalidades[127],"Micronesia");
    strcpy(nacionalidades[128],"Monaco");
    strcpy(nacionalidades[129],"Moldavia");
    strcpy(nacionalidades[130],"Mongolia");
    strcpy(nacionalidades[131],"Montenegro");
    strcpy(nacionalidades[132],"Mozambique");
    strcpy(nacionalidades[133],"Myanmar");

    //8 N--------------------------------

    strcpy(nacionalidades[134],"Namibia");
    strcpy(nacionalidades[135],"Nauru");
    strcpy(nacionalidades[136],"Nepal");
    strcpy(nacionalidades[137],"Nicaragua");
    strcpy(nacionalidades[138],"Niger");
    strcpy(nacionalidades[139],"Nigeria");
    strcpy(nacionalidades[140],"Noruega");
    strcpy(nacionalidades[141],"Nueva Zelanda");

    //2 O--------------------------------

    strcpy(nacionalidades[142],"Oman");
    strcpy(nacionalidades[143],"Orden de Malta");

    //11 P-------------------------------

    strcpy(nacionalidades[144],"Paises Bajos");
    strcpy(nacionalidades[145],"Pakistan");
    strcpy(nacionalidades[146],"Palestina");
    strcpy(nacionalidades[147],"Palau");
    strcpy(nacionalidades[148],"Panama");
    strcpy(nacionalidades[149],"Papua Nueva Guinea");
    strcpy(nacionalidades[150],"Paraguay");
    strcpy(nacionalidades[151],"Peru");
    strcpy(nacionalidades[152],"Polonia");
    strcpy(nacionalidades[153],"Portugal");
    strcpy(nacionalidades[154],"Puerto Rico");

    //9 R--------------------------------

    strcpy(nacionalidades[155],"Reino Unido");
    strcpy(nacionalidades[156],"Republica Centroafricana");
    strcpy(nacionalidades[157],"Republica Checa");
    strcpy(nacionalidades[158],"Republica del Congo");
    strcpy(nacionalidades[159],"Republica Democratica del Congo");
    strcpy(nacionalidades[160],"Republica Dominicana");
    strcpy(nacionalidades[161],"Ruanda");
    strcpy(nacionalidades[162],"Rumania");
    strcpy(nacionalidades[163],"Rusia");

    //22 S-------------------------------

    strcpy(nacionalidades[164],"Sahara Occidental");
    strcpy(nacionalidades[165],"Samoa Americana");
    strcpy(nacionalidades[166],"Samoa");
    strcpy(nacionalidades[167],"San Cristobal y Nieves");
    strcpy(nacionalidades[168],"San Marino");
    strcpy(nacionalidades[169],"Santa Lucia");
    strcpy(nacionalidades[170],"Santo Tome y Principe");
    strcpy(nacionalidades[171],"San Vicente y las Granadinas");
    strcpy(nacionalidades[172],"Senegal");
    strcpy(nacionalidades[173],"Serbia");
    strcpy(nacionalidades[174],"Seychelles");
    strcpy(nacionalidades[175],"Sierra Leona");
    strcpy(nacionalidades[176],"Singapur");
    strcpy(nacionalidades[177],"Siria");
    strcpy(nacionalidades[178],"Somalia");
    strcpy(nacionalidades[179],"Sri Lanka");
    strcpy(nacionalidades[180],"Sudafrica");
    strcpy(nacionalidades[181],"Sudan");
    strcpy(nacionalidades[182],"Sudan del Sur");
    strcpy(nacionalidades[183],"Suecia");
    strcpy(nacionalidades[184],"Suiza");
    strcpy(nacionalidades[185],"Suazilandia");

    //13 T-------------------------------

    strcpy(nacionalidades[186],"Tilandia");
    strcpy(nacionalidades[187],"Taiwan");
    strcpy(nacionalidades[188],"Tanzania");
    strcpy(nacionalidades[189],"Tayikistan");
    strcpy(nacionalidades[190],"Tibet");
    strcpy(nacionalidades[191],"Timor Oriental");
    strcpy(nacionalidades[192],"Togo");
    strcpy(nacionalidades[193],"Tonga");
    strcpy(nacionalidades[194],"Trinidad y Tobago");
    strcpy(nacionalidades[195],"Tunez");
    strcpy(nacionalidades[196],"Turkmenistan");
    strcpy(nacionalidades[197],"Turquia");
    strcpy(nacionalidades[198],"Tuvalu");

    //4 U--------------------------------

    strcpy(nacionalidades[199],"Ucrania");
    strcpy(nacionalidades[200],"Uganda");
    strcpy(nacionalidades[201],"Uruguay");
    strcpy(nacionalidades[202],"Uzbequistan");

    //4 V--------------------------------

    strcpy(nacionalidades[203],"Vanuatu");
    strcpy(nacionalidades[204],"Vaticano");
    strcpy(nacionalidades[205],"Venezuela");
    strcpy(nacionalidades[206],"Vietnam");

    //1 W--------------------------------


    strcpy(nacionalidades[207],"Wallis y Futuna");

    //2 Y--------------------------------

    strcpy(nacionalidades[208],"Yemen");
    strcpy(nacionalidades[209],"Yibuti");

    //3 Z--------------------------------

    strcpy(nacionalidades[210],"Zambia");
    strcpy(nacionalidades[211],"Zaire");
    strcpy(nacionalidades[212],"Zimbabue");
}
//---------------------------------------------------------------------------------------------------------------------


//CARGA Y VALIDA LA EDAD HACIENDO QUE SEA MAYOR DE 18 Y MENOR DE 100 AÑOS----------------------------------------------
void cargarEdad(astronauta* astro)
{

    int edad;
    int val;

    printf("\nEdad: ");
    scanf("%i", &edad);


    int valido = validacionEdad(edad);

    if(valido == 1 )
    {
        astro->edad = edad;
    }
    else if (valido == 0)
    {

        while (valido == 0)
        {

            printf("\nInsertar una edad valida(+18 y -100)\nEDAD: ");
            fflush(stdin);
            scanf("%i", &edad);

            valido = validacionEdad(edad);
        }

        astro->edad = edad;
    }

}
//---------------------------------------------------------------------------------------------------------------------



//VALIDA LA CONDICION DE +18 Y -100 AÑOS-------------------------------------------------------------------------------
int validacionEdad(int edad)
{
    int valido = 0;
    if(edad >= 18 && edad < 100)
    {

        valido = 1;
    }
    else
    {
        valido = 0;

    }

    return valido;
}
//---------------------------------------------------------------------------------------------------------------------


//MUESTRA EL CATALOGO DE 213 PAISES Y LE ASIGNA UN VALOR PARA INSERTAR A CADA UNO DE ELLOS-----------------------------
void mostrarCatalogoNacionalidades(char nacionalidades[cantNacionalidades][maxCaracteres])
{

    int i = 0;

    printf("\nLISTA DE PAISES: \n");

    while(i < cantNacionalidades)
    {

        printf("%s \n", nacionalidades[i]);
    i++;
    }
}
//---------------------------------------------------------------------------------------------------------------------



//CARGA LA ESPECIALIDAD POR MEDIO DE UN MENU---------------------------------------------------------------------------
void  cargarEspecialidad(astronauta* astro)
{

    int seleccion;

    char especialidades[cantEspecialidades][maxCaracteres];
    especialidadesAstronauta(especialidades);

    printf("Seleccione la especialidad \n");
    mostrarEspecialidades(especialidades);
    scanf("%i", &seleccion);




    int valido = validacionEspecialidad(seleccion);

    if(valido == 1)
    {

        strcpy(astro->especialidad,especialidades[seleccion - 1]);

    }
    else if (valido == 0)
    {

        while (valido == 0)
        {

            printf("Inserta un numero asociado a una especialidad\nESPECIALIDAD: ");
            fflush(stdin);
            scanf("%i", &seleccion);

            valido = validacionEspecialidad(seleccion);
        }
    }
    strcpy(astro->especialidad,especialidades[seleccion - 1]);
}
//---------------------------------------------------------------------------------------------------------------------

//VALIDA QUE EL NUMERO INSERTADO ESTE ASOCIADO A ALGUNO DE LAS ESPECIALIDADES MOSTRADAS EN EL MENU---------------------
int validacionEspecialidad (int seleccion)
{

    int valido = 0;

    if(seleccion <= cantEspecialidades && seleccion > 0)
    {

        valido = 1;

    }
    else
    {

        valido = 0;
    }

    return valido;
}
//---------------------------------------------------------------------------------------------------------------------


//MUESTRA LA ESPECIALIDADES Y LE ASIGNA UN NUMERO A CADA UNO PARA INSERTAR Y ESCOGER UNA ESPECUALIDAD------------------
void mostrarEspecialidades(char especialidades[][maxCaracteres])
{

    int i = 0;
    int pos = 1;

    while (i< cantEspecialidades)
    {

        printf( "%i = ", pos);
        printf("%s \n", especialidades[i]);

        pos++;
        i++;
    }
}
//---------------------------------------------------------------------------------------------------------------------


//CARGA EN UNA MATRIZ INSERTADA LAS ESPECIALIDADES QUE LUEGO PODRAN SER ESCOGIDAS--------------------------------------
void especialidadesAstronauta(char especialidades[][maxCaracteres])
{


    printf("\n");
    strcpy(especialidades[0], "Piloto");
    strcpy(especialidades[1], "Astrofisico");
    strcpy(especialidades[2], "Ingeniero Espacial");
    strcpy(especialidades[3], "Biologo");
    strcpy(especialidades[4], "Comercial");
}
//---------------------------------------------------------------------------------------------------------------------
